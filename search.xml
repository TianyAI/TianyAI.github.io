<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入Django模板</title>
      <link href="/2023/05/07/%E6%B7%B1%E5%85%A5Django%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/05/07/%E6%B7%B1%E5%85%A5Django%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="深入模板"><a href="#深入模板" class="headerlink" title="深入模板"></a>深入模板</h1><h2 id="1-Django模板引擎"><a href="#1-Django模板引擎" class="headerlink" title="1.Django模板引擎"></a>1.Django模板引擎</h2><p>Django内置的模板引擎是一种可扩展的Python模板语言，专为快速开发web应用程序而设计的。它提供了一些常见的模板引擎功能，如变量替换、控制流和模板继承，使得可以轻松地创建复杂的页面布局和构建动态内容。</p><p>Django模板语言中包含以下核心组件：</p><ol><li>变量(上下文)：可以在模板中使用变量来表示数据、对象和其他类型的数据。</li><li>标签：标签是Django模板语言中最重要的一部分。标签使能够控制模板行为，例如检索数据、创建循环和引用其他模板。</li><li>过滤器：过滤器允许修改变量，例如转换大小写或格式化日期和时间。</li><li>继承：继承允许创建模板“基础”和“子页面”，这样可以重用模板代码并覆盖其中的块。</li><li>包含：包含允许在模板中嵌入其他模板。</li></ol><p>总的来说，Django模板引擎是一个强大而灵活的工具，它允许快速而简单地创建复杂的模板，并且允许使用Python代码来增强其功能。</p><h3 id="1-1模板上下文"><a href="#1-1模板上下文" class="headerlink" title="1.1模板上下文"></a>1.1模板上下文</h3><p>模板上下文是模板中基本的组成单位，上下文的数据由视图函数或视图类传递。以表示，variable是上下文名称，它支持Python所有的数据类型。上下文数据格式不同，在模板里的使用方式也有差异。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//假如variable = &#x27;字符串或整型&#x27;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;variable&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//variable = &#123;&#x27;name&#x27;:&#x27;字典或实例化对象&#x27;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;variable.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//variable = [&#x27;列表或元组&#x27;]</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;variable.0&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在render函数源码内部，解析过程是由render_to_string完成的再传递给HttpResponse</p><p>Django模板引擎的解析过程：</p><p><img src="https://s1.vika.cn/space/2023/05/07/d6cba89ecc3248ff87332e9153a83eb8" alt="4b273ccdc89c553ec99e86992286638"></p><h3 id="1-2自定义标签"><a href="#1-2自定义标签" class="headerlink" title="1.2自定义标签"></a>1.2自定义标签</h3><p>标签是对模板上下文进行控制输出，Django内置了许多模板标签，常用的内置标签如下：</p><p><img src="https://s1.vika.cn/space/2023/05/07/f1ddc74365ac43239cf83a516e2d6be1" alt="c32514858fbca03fe3155b1c32dca5c"></p><p>对于for、if、block等标签在结束位置需要以end+标签结尾例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>除了使用内置的模板标签之外，还可以自定义模板标签。在项目根目录里，我们可以创建一个新的文件夹(要创建初始化init文件并且要在settings里的app里添加自定义模板标签的文件夹)或者在app文件夹里新建templatetags文件夹(名字固定的)和自定义标签文件</p><p>自定义标签文件mytags.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="comment"># 创建模版对象</span></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模版节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReversalNode</span>(template.Node):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.value = <span class="built_in">str</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据反转处理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="keyword">return</span> self.value[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明并定义标签</span></span><br><span class="line"><span class="meta">@register.tag(<span class="params">name=<span class="string">&#x27;reversal&#x27;</span></span>)</span></span><br><span class="line"><span class="comment"># parse是解析器对象，token是被解析的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_reversal</span>(<span class="params">parse, token</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># tag_name是代表标签名，即reversal</span></span><br><span class="line">        <span class="comment"># value是由标签传递的数据</span></span><br><span class="line">        tag_name, value = token.split_contents()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">raise</span> template.TemplateSyntaxError(<span class="string">&#x27;syntax&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调用自定义的模板节点类</span></span><br><span class="line">    <span class="keyword">return</span> ReversalNode(value)</span><br></pre></td></tr></table></figure><ul><li>函数do_reversal经过装饰器register.tag(name&#x3D;’reversal’)处理，这是让函数执行模板标签注册标签名称由装饰器参数name进行命名，若没有设置name参数则默认以函数名作为标签名称。</li><li>函数参数parse是解析器对象，当Django运行时，它将所有标签和过滤器进行加载并生成到parse对象，在解析模板文件里面的标签时，Django就会从parse对象查找对应的标签信息。</li><li>参数token是模板文件使用标签时所传递的数据对象，主要包含标签名和数据内容</li></ul><p>模板文件index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;#导入自定义标签文件mytags#&#125;</span><br><span class="line">&#123;% load mytags %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% reversal &#x27;Django&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3模板继承"><a href="#1-3模板继承" class="headerlink" title="1.3模板继承"></a>1.3模板继承</h3><p>模板继承是通过模板标签来实现的，作用是将多个模板文件的共同代码集中在一个新的模板文件中，可以大大减少模板之间重复的代码。</p><p>父模板.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 block后跟的title或body是程序员自己规定的，子模板要在对应处编写内容</p><p>需要继承父模板的模板文件需要编写的内容只有内的东西。</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;index:index&#x27; %&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Django<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>由上，原本需要编写的head部分、标题部分都不需要重新编写，很便捷！</p><h3 id="1-4自定义过滤器"><a href="#1-4自定义过滤器" class="headerlink" title="1.4自定义过滤器"></a>1.4自定义过滤器</h3><p>过滤器主要是对上下文的内容进行操作处理，如替换、反序和转义等。简单理解为为上下文提供的内置函数。</p><p>variable代表模板上下文，filter代表某个过滤器。单个上下文也可使用多个过滤器同时使用</p><p>在使用过程中有些过滤器也可以传递参数，但仅支持传递一个参数。过滤器与参数之间使用冒号隔开，并且两者之间不能留有空格</p><p>Django有好多内置的过滤器，这里就不写太多了，直接跳到自定义过滤器吧。</p><p>上边讲到的自定义标签，自定义过滤器声明方式与其类似，创建templatetags文件夹，文件夹内放置过滤器声明文件</p><p>myfilter.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="comment"># 创建模版对象</span></span><br><span class="line">register = template.Library()</span><br><span class="line"><span class="comment"># 声明并定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;replace&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_replace</span>(<span class="params">value, agrs</span>):</span><br><span class="line">    oldValue = agrs.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    newValue = agrs.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> value.replace(oldValue, newValue)</span><br></pre></td></tr></table></figure><p>过滤器的定义比标签过程简单，只需定义函数即可。</p><ul><li>do_replace函数由@register.filter进行注册操作。</li><li>由name命名</li><li>参数value表示当前过滤器的模板上下文，args代表过滤器的参数</li></ul><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;#导入自定义过滤器文件myfilter#&#125;</span><br><span class="line">&#123;% load myfilter %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>替换前：&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>替换后：</span><br><span class="line">&#123;&#123; value | replace:&#x27;Python:Django&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：与导入静态素材文件相同，过滤器和标签文件都需要进行load加载。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究DjangoFBV视图</title>
      <link href="/2023/05/02/DjangoFBV%E8%A7%86%E5%9B%BE/"/>
      <url>/2023/05/02/DjangoFBV%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="探究DjangoFBV视图"><a href="#探究DjangoFBV视图" class="headerlink" title="探究DjangoFBV视图"></a>探究DjangoFBV视图</h1><p>视图(Views)是Django的MTV架构模式的V部分。可以理解为视图是MVC架构里面的C部分(控制器),主要处理功能和事业上的逻辑。在视图里定义def函数，这种方式称为FBV。</p><h2 id="1-设置响应方式"><a href="#1-设置响应方式" class="headerlink" title="1.设置响应方式"></a>1.设置响应方式</h2><p>网站的运行原理都是遵从HTTP协议的，分为HTTP请求和HTTP响应。HTTP响应方式也成为HTTP状态码，分为5种状态：消息、成功、重定向、请求错误和服务器错误。若以使用频率划分，则HTTP状态码可以分为：成功、重定向和异常响应(请求错误和服务器错误)。</p><h3 id="1-1返回响应内容"><a href="#1-1返回响应内容" class="headerlink" title="1.1返回响应内容"></a>1.1返回响应内容</h3><p>视图函数通过return方式返回响应的内容，然后将生成相应的网页内容呈现在浏览器上。</p><p>不同的响应方式：</p><p><img src="https://s1.vika.cn/space/2023/05/04/6bfa3b1f5aa84fd6ba340011cbe56192" alt="image-20230504232737903"></p><p>这些方式各代表不同的状态码，其核心作用是Web Server服务器用来告诉浏览器当前网页请求发生了什么事，或者当前Web服务器的响应状态。</p><p>以HttpResponse为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index中的urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index,name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index的views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&#x27;h=&lt;h1&gt;Hello World&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html,status=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>从HttpResponse的参数可知，第一个参数是响应内容，一般是网页内容或者JSON数据，分别代表HTML语言，API接口数据。</p><p>但如果网页内容过大，肯定会增加视图函数代码量，无法体现模板的作用。因此Django做了封装处理，定义了render、render_to_response和redirect其中render与render_to_response作用一致，所以暂时只讲解render。</p><p>render中两个必须的参数request和template_name以及一个重要参数context。</p><ul><li>request：浏览器向服务器发送的请求对象，包含用户信息、请求内容和请求方式等。</li><li>template_name：设置模板文件名，用于生成网页内容。</li><li>context：对模板的模板变量赋值，以字典格式表示，默认情况下是一个空字典。</li></ul><p>注：传递模板变量值时，可以选择此方式：使用python内置函数locals()将视图函数内定义的变量直接传递给context即可减少代码冗余。</p><h3 id="1-2设置重定向"><a href="#1-2设置重定向" class="headerlink" title="1.2设置重定向"></a>1.2设置重定向</h3><p>简单来说，重定向就是跳转到新的网页。</p><p>Django中重定向函数：redirect()</p><p>此函数是将HttpResponseRedirect和HttpResponsePermanentRedirect的功能进行完善与组合。</p><p>urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 定义首页的路由</span></span><br><span class="line">    path(<span class="string">&#x27;index&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    <span class="comment"># 定义商城的路由</span></span><br><span class="line">    path(<span class="string">&#x27;shop&#x27;</span>, views.shop, name=<span class="string">&#x27;shop&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponsePermanentRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;index:shop&#x27;</span> ,permanent=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 设置302的重定向</span></span><br><span class="line">    <span class="comment"># url = reverse(&#x27;index:shop&#x27;)</span></span><br><span class="line">    <span class="comment"># return HttpResponseRedirect(url)</span></span><br><span class="line">    <span class="comment"># 设置301的重定向</span></span><br><span class="line">    <span class="comment"># return HttpResponsePermanentRedirect(url)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shop</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>index的响应函数redirect将参数permanent设置为True，并跳转到路由命名未shop的网页；若使用HttpResponseRedirect或者HttpResponsePermanentRedirect，则需使用reverse函数将路由命名转换成路由地址，总结以上，redirect更加便捷。</p><h2 id="2-HTTP请求"><a href="#2-HTTP请求" class="headerlink" title="2.HTTP请求"></a>2.HTTP请求</h2><h3 id="2-1获取请求信息"><a href="#2-1获取请求信息" class="headerlink" title="2.1获取请求信息"></a>2.1获取请求信息</h3><p>当在浏览器上访问某个网址时，实质是向网站发送一个HTTP请求，HTTP请求分为8种请求方式：</p><ol><li>GET：用于获取某个资源的信息，通常用户通过浏览器访问 Web 页面时使用该方法，GET 请求是一种安全的只读请求，不会改变服务器上的资源状态。</li><li>POST：用于在服务器上新建资源或提交数据（如 Web 表单），POST 常被用于提交表单和上传文件等操作，此请求具有修改资源信息的目的。</li><li>PUT：用于在服务器上创建或更新资源，PUT 用于替换指定 URI（Uniform Resource Identifier）下的全部资源，是一种幂等性请求方式。</li><li>DELETE：用于删除服务器上的某个资源。</li><li>HEAD：与 GET 请求方式类似，但只返回请求头部信息，不返回资源内容，该请求用于获取服务器资源的元数据。</li><li>OPTIONS：用于获取 Web 服务器支持的所有 HTTP 方法。</li><li>TRACE：用于追踪当前 HTTP 请求&#x2F;响应在 Web 服务器之间传递时对应的请求和响应行。</li><li>CONNECT：建立一条到由目标资源标识符所标识的服务器的指定端口的隧道，用于隧道中的数据传输。</li></ol><p>以上最基本的是GET请求和POST请求，GET一般用于url请求(参数形式：url?x1&#x3D;xxx&amp;x2&#x3D;xxx)，POST一般用于表单请求。</p><p>对于Django来说，当它接收到HTTP请求之后，会根据HTTP请求携带的请求参数以及请求信息创建一个WSGIRequest对象，并且作为视图函数的第一个参数，这个参数通常写成request，包含用户所有的请求信息，WSGIRequest对象的所有属性：</p><ol><li>WSGIRequest.method：获取客户端请求使用的 HTTP 方法</li><li>WSGIRequest.path：获取用户请求的资源路径</li><li>WSGIRequest.GET：获取 GET 请求中的参数</li><li>WSGIRequest.POST：获取 POST 请求中的参数</li><li>WSGIRequest.COOKIES：获取客户端请求中的 cookie</li><li>WSGIRequest.FILES：获取客户端请求中上传的文件</li><li>WSGIRequest.META：获取服务器和客户端交互的元数据，比如请求头、请求 IP 等</li><li>WSGIRequest.resolver_match：获取与请求路径匹配的 URL 模式匹配项</li><li>WSGIRequest.session：获取客户端请求对应的 session 对象</li></ol><p>由于WSGIRequest是继承HttpRequest类，所以也使用其中的类方法，HttpRequest的类有30个左右就不一一详解了。</p><p>urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 定义首页的路由</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 使用method属性判断请求方式</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 类方法的使用</span></span><br><span class="line">        <span class="built_in">print</span>(request.is_secure())</span><br><span class="line">        <span class="built_in">print</span>(request.is_ajax())</span><br><span class="line">        <span class="built_in">print</span>(request.get_host())</span><br><span class="line">        <span class="built_in">print</span>(request.get_full_path())</span><br><span class="line">        <span class="built_in">print</span>(request.get_raw_uri())</span><br><span class="line">        <span class="comment"># 属性的使用</span></span><br><span class="line">        <span class="built_in">print</span>(request.COOKIES)</span><br><span class="line">        <span class="built_in">print</span>(request.content_type)</span><br><span class="line">        <span class="built_in">print</span>(request.content_params)</span><br><span class="line">        <span class="built_in">print</span>(request.scheme)</span><br><span class="line">        <span class="comment"># 获取GET请求的请求参数</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.get(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取POST请求的请求参数</span></span><br><span class="line">        <span class="built_in">print</span>(request.POST.get(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>template模板文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;Hello world&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user&quot;</span>/&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/04/16/Vue/"/>
      <url>/2023/04/16/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h3><p>在使用 Vue 时，我们推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</p><h3 id="直接引入script"><a href="#直接引入script" class="headerlink" title="直接引入script"></a>直接引入script</h3><p>直接下载并用 <code>&lt;script&gt;</code> 标签引入，<code>Vue</code> 会被注册为一个全局变量</p><p><a href="https://cn.vuejs.org/js/vue.js">开发版本</a></p><p><a href="https://cn.vuejs.org/js/vue.min.js">生产版本</a></p><p>这些都是小型项目采取的安装方式，若想了解一些其他的方法或者安装脚手架等可以参考官方的文档<a href="https://vuejs.bootcss.com/guide/installation.html">✈</a>(点击小飞机)</p><h2 id="Vue-js介绍"><a href="#Vue-js介绍" class="headerlink" title="Vue.js介绍"></a>Vue.js介绍</h2><p>在学之前先说一下Vue是啥，它是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> property 的值。无论何时，绑定的数据对象上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p><p>通过使用 v-once，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>Vue中有2种数据绑定的方式：</p><ol><li><p>单项绑定(v-bind)：数据只能从data流向页面(可以简写为:)</p></li><li><p>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data</p><p>备注：</p><ol><li>双向绑定一般都应用在表单类元素上(input、select等)</li><li>v-model:value 可以简写为v-model，因为v-model默认收集的就是value值。</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>//单项绑定</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>//双向绑定</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">producetionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时产生生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">//新建Vue对象绑定容器，每个对象只可以绑定一个，内部data传递的数据可以用来进行插值、数据绑定等操作</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span> ,<span class="comment">//参数对象元素el代表绑定的容器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">//data是要传的数据，对象形式，可多层嵌套，</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>data与el的2种写法</p><p>​          1.el有2种写法</p><p>​                  (1).new Vue时候配置el属性。</p><p>​                  (2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p><p>​          2.data有2种写法</p><p>​                  (1).对象式</p><p>​                  (2).函数式</p><p>​                  如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><p>​          3.一个重要的原则：</p><p>​                  由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。*</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        你好,&#123;&#123;name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">producetionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="comment">//el第一种写法</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span></span><br><span class="line"><span class="language-javascript">    x.$mount(<span class="string">&#x27;#root&#x27;</span>)<span class="comment">//el第二种写法 好处在与比较灵活，可以实现便利的切换等操作。</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第一种写法：对象式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//name:&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//第二种写法：函数式也可以直接data()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><p>MVVM模型</p><pre><code>       1. M：模型(Model) ：data中的数据       2. V：视图(View) ：模板代码       3. VM：视图模型(ViewModel)：Vue实例</code></pre><p><img src="https://s1.vika.cn/space/2023/04/16/d620880173dc46babbc283c9d820aa7e" alt="image-20230416140352547"></p><p>观察发现：</p><p>​            1.data中所有的属性，最后都出现在了vm身上。</p><p>​            2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>Object.defineProperty方法的作用</p><p><strong><code>Object.defineProperty()</code></strong> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><p>用此方法增加的对象属性默认在外部调用时无法进行修改，而且增加的属性默认会导致值无法枚举</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(Object.keys(person))</span></span><br></pre></td></tr></table></figure><h3 id="什么是数据代理"><a href="#什么是数据代理" class="headerlink" title="什么是数据代理"></a><strong>什么是数据代理</strong></h3><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p><p>例子：访问对obj2.x的操作，关联obj.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        obj.<span class="property">x</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><ol><li><p>Vue中的数据代理：</p><p>​通过vm对象来代理data对象中属性的操作（读&#x2F;写）</p></li><li><p>Vue中数据代理的好处：</p><p>​更加方便的操作data中的数据</p></li><li><p>基本原理：</p><p>​通过Object.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p></li></ol><p>在构建vue对象时，data的数据会传给__data,然后通过Object.defineProperty()把_data对象中所有属性添加到vm上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">address</span>:<span class="string">&#x27;宏福科技园&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p><em>事件的基本使用：</em></p><p>​              <em>1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</em></p><p>​              <em>2.事件的回调需要配置在methods对象中，最终会在vm上(和data中不同的是不需要进行数据代理，若放到data中则会导致Vue很累)；</em></p><p>​              <em>3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；</em></p><p>​              <em>4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</em></p><p>​              <em>5.@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参；</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(event.target.innerText)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this) //此处的this是vm</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo2</span>(<span class="params">event,number</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(event,number)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(event.target.innerText)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this) //此处的this是vm</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！！&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>Vue中的事件修饰符：<br>                        1.prevent：阻止默认事件（常用）；<br>                        2.stop：阻止事件冒泡（常用）；<br>                        3.once：事件只触发一次（常用）；<br>                        4.capture：使用事件的捕获模式；<br>                        5.self：只有event.target是当前操作的元素时才触发事件；<br>                        6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕(不加的话，默认等待，最后执行默认行为)；</p><p>冒泡只会返回的是选择的event.target</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">div1</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">div2</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(e.target)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>1.Vue中常用的按键别名：</p><p>​              回车 &#x3D;&gt; enter</p><p>​              删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</p><p>​              退出 &#x3D;&gt; esc</p><p>​              空格 &#x3D;&gt; space</p><p>​              换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</p><p>​              上 &#x3D;&gt; up</p><p>​              下 &#x3D;&gt; down</p><p>​              左 &#x3D;&gt; left</p><p>​              右 &#x3D;&gt; right</p><p>​        2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p><p>​        3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><p>​              (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</p><p>​              (2).配合keydown使用：正常触发事件。</p><p>​        4.也可以使用keyCode去指定具体的按键（不推荐）</p><p>​        5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.huiche</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span> <span class="comment">//定义了一个别名按键</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">showInfo</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(e.key,e.keyCode)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="methods方式"><a href="#methods方式" class="headerlink" title="methods方式"></a>methods方式</h3><p>例子：写出人的全称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@---fullName&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所谓的计算属性就是拿着已经写完的属性进行加工计算过后的属性，计算的属性一般是计算data里边的，但是计算的后的变量不能再放到data中。</p><p>注意：fullName()每次都会调用，不管是否发生改变，而下边的计算属性会有一个缓存保留的功能(依赖数据不变他就不变，而且只会调用一次)。</p><h3 id="计算属性方式"><a href="#计算属性方式" class="headerlink" title="计算属性方式"></a>计算属性方式</h3><p>计算属性用：computed，而且计算的整个过程要放到一个对象里。<br>    计算属性：<br>    1.定义：要用的属性不存在，要通过已有属性计算得来。<br>    2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。<br>    3.get函数什么时候执行？<br>        (1).初次读取时会执行一次。<br>        (2).当依赖的数据发生改变时会被再次调用。<br>    4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。<br>    5.备注：<br>        1.计算属性最终会出现在vm上，直接读取使用即可(没在_data中)。<br>        2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        测试：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">x</span>:<span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//set什么时候调用? 当fullName被修改时。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>,value)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简写方法就是:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">get()&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="line"><span class="comment">return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set(value)&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;set&#x27;,value)</span></span><br><span class="line"><span class="comment">const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">this.firstName = arr[0]</span></span><br><span class="line"><span class="comment">this.lastName = arr[1]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>在上边讲过的computed属性可以实时改变属性并返回。</p><p>新的知识点：</p><ol><li><p>监视属性watch(值是配置对象)</p><ul><li><p>1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p></li><li><p>2.监视的属性必须存在，才能进行监视！！</p></li><li><p>3.监视的两种写法：</p><p>​(1).new Vue时传入watch配置</p><p>​    (2).通过vm.$watch监视</p></li></ul></li><li><p>handler(newValue,oldValue)，作用和setter类似，会监测到属性的修改变化将改变后和改变前的值分别传给newV..和oldV..</p></li><li><p>immediate,初始化时让handler调用一下</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/* watch:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">isHot:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">immediate:true, //初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">//handler什么时候调用？当isHot发生改变时。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">handler(newValue,oldValue)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">&#125; */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><p>监视多级结构中的某个属性的变化方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;父.子&#x27;</span> &#123;监视配置&#125;</span><br></pre></td></tr></table></figure><p>监视多级结构中所有属性的变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">监视目标: &#123;<span class="attr">deep</span>: <span class="literal">true</span>, .....&#125;</span><br></pre></td></tr></table></figure><p>深度监视：</p><p>​            (1).Vue中的watch默认不监测对象内部值的改变（一层）。</p><p>​            (2).配置deep:true可以监测对象内部值改变（多层）。</p><p>​        备注：</p><p>​            (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</p><p>​            (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><p>深度监视的简写方式，当我们不需要除handler以外的配置时可以使用(写成一个函数形式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常写法</span></span><br><span class="line"><span class="attr">isHot</span>:&#123;</span><br><span class="line">    <span class="comment">// immediate:true, //初始化时让handler调用一下</span></span><br><span class="line">    <span class="comment">// deep:true,//深度监视</span></span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//简写</span></span><br><span class="line">    <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><em>computed和watch之间的区别：</em></p><p>​            1.computed能完成的功能，watch都可以完成。</p><p>​            2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><p>​        两个重要的小原则：</p><p>​              1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</p><p>​              2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</p><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><p>绑定class样式</p><p>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。</p><ol><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ol><p>绑定style样式</p><ol><li>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。</li><li>:style&#x3D;”[a,b]”其中a、b是样式对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">classArr</span>: [<span class="string">&#x27;atguigu1&#x27;</span>, <span class="string">&#x27;atguigu2&#x27;</span>, <span class="string">&#x27;atguigu3&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">classObj</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">atguigu3</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">atguigu2</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">styleObj</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">styleObj2</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">backgroundColor</span>: <span class="string">&#x27;orange&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">styleArr</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">backgroundColor</span>: <span class="string">&#x27;gray&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">changeMood</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>, <span class="string">&#x27;sad&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>条件渲染：</p><ol><li><p>v-if</p><p>写法：(1).v-if&#x3D;”表达式” </p><p>(2).v-else-if&#x3D;”表达式”</p><p>(3).v-else&#x3D;”表达式”</p><p>适用于：切换频率较低的场景。</p><p>特点：不展示的DOM元素直接被移除。</p><p>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p><p>2.v-show</p><pre><code>写法：v-show=&quot;表达式&quot;适用于：切换频率较高的场景。特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</code></pre><p>3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>列表渲染的核心方式就是循环v-for</p><p>v-for指令:</p><p>​            1.用于展示列表数据</p><p>​            2.语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</p><p>​            3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><p>列表中信息可以循环数组、对象、字符串。。的内容填在每一行信息里。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>演示，以数组和对象为例：</p><p><img src="https://s1.vika.cn/space/2023/05/08/48e9355a5b3140ea8fa2399f366fbf45" alt="image-20230508193637154"></p><h2 id="Key的原理"><a href="#Key的原理" class="headerlink" title="Key的原理"></a>Key的原理</h2><p>vue中的:key的作用：粗略的来讲就是给标签做一个标识。<br>key有什么作用？(key的内部原理)</p><pre><code>                    1. 虚拟DOM中key的作用：                                    key是虚拟DOM对象的标识，当数据发生key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</code></pre><p>   2.对比规则：<br>         (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>                             ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！(复用原理，可以提高效率)<br>                             ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​          (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>​ 创建新的真实DOM，随后渲染到到页面。</p><pre><code>                    3. 用index作为key可能会引发的问题：                                        1. 若对数据进行：逆序添加、逆序删除等                                                        1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:                                        ​                       会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。                                                                                2. 如果结构中还包含输入类的DOM：                                                            ​                       会产生错误DOM更新 ==&gt; 界面有问题。                                                            3. 开发中如何选择key?:                                        1. 若对数据进行：逆序添加、逆序删除等    1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。                                                                                                ​    2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，                                        使用index作为key是没有问题的。</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><p>列表过滤常见用于用户筛选，根据输入的部分信息，筛选出符合的信息。</p><p>在输入部分，需要对输入框的value做双向绑定，因为涉及到数据的动态变化，所以需要使用计算或监督属性对列表进行处理，筛选列表信息的内容也需要用到数组(对象)方法中的filter进行内容筛选。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用watch实现</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//#region </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">keyWord:&#x27;&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">persons:[</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">],</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">filPerons:[]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">keyWord:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">immediate:true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">handler(val)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">return p.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//#endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//用computed实现</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="https://s1.vika.cn/space/2023/05/08/6611d28bfc824277bba80233e44169d3" alt="image-20230508211926690"></p><p><img src="https://s1.vika.cn/space/2023/05/08/fc19da757baa40979872120b4d474c77" alt="image-20230508211944048"></p><h2 id="Vue检测数据的原理"><a href="#Vue检测数据的原理" class="headerlink" title="Vue检测数据的原理"></a>Vue检测数据的原理</h2><p>我们在更新Vue中的data数据时，会考虑到一个问题，新添加的属性是否为响应式数据(经过Vue的数据代理的)，在vue当中，有一套特殊的检测数据原理，可以让新添加的属性作为响应式数据。</p><p>Vue监视数据的原理：</p><p>​        1. vue会监视data中所有层次的数据。</p><p>​        2. 如何监测对象中的数据？</p><p>​                通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​                  (1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​                  (2).如需给后添加的属性做响应式，请使用如下API：</p><p>​                          Vue.set(target，propertyName&#x2F;index，value) 或 </p><p>​                          vm.$set(target，propertyName&#x2F;index，value)</p><p>​        3. 如何监测数组中的数据？</p><p>​                  通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​                    (1).调用原生对应的方法对数组进行更新。</p><p>​                    (2).重新解析模板，进而更新页面。</p><p>​        4.在Vue修改数组中的某个元素一定要用如下方法：</p><p>​              1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()，不是Array的原生方法。</p><p>​              2.Vue.set() 或 vm.$set()</p><p>​        特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><p>在前后端进行数据传递的时候，我们常用到表单的提交，Vue在表单的汇总信息上做出了很大的优化，当我们需要提交数据的时候可以更加省时省力。</p><p>收集表单数据：</p><p>​          若：<input type="text">，则v-model收集的是value值，用户输入的就是value值。</p><p>​          若：<input type="radio">，则v-model收集的是value值，且要给标签配置value值。</p><p>​          若：<input type="checkbox"></p><p>​              1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​              2.配置input的value属性:</p><p>​                  (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p><p>​                  (2)v-model的初始值是数组，那么收集的的就是value组成的数组</p><p>​          备注：v-model的三个修饰符：</p><p>​                  lazy：失去焦点再收集数据</p><p>​                  number：输入字符串转为有效的数字</p><p>​                  trim：输入首尾空格过滤</p><p>注：在表单提交的时候，浏览器会默认跳转页面(未知页面)，若想屏蔽可以采用上边说过的prevent事件修饰符(@submit.prevent)</p><p>以下是表单数据收集示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">性别：</span><br><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">爱好：</span><br><span class="line">学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">所属校区</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">其他信息：</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划(续)</title>
      <link href="/2023/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92(%E7%BB%AD)/"/>
      <url>/2023/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92(%E7%BB%AD)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划+背包问题</title>
      <link href="/2023/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/03/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>讲之前先举一个经典贪心例题</p><p><img src="https://s1.vika.cn/space/2023/03/25/7430c927132f454f9ca34ba360da4f6f" alt="image-20230325142244035"></p><p>此题可以用贪心从面值高的硬币遍历，但只适合一些差距大的面值，若存在更多面值，例如</p><p><img src="https://s1.vika.cn/space/2023/03/25/1f3c5c1035a44d97a6a7b9037e90563b" alt="image-20230325142426100"></p><h2 id="动态规划（DP）基础"><a href="#动态规划（DP）基础" class="headerlink" title="动态规划（DP）基础"></a>动态规划（DP）基础</h2><p>type &#x3D; [1, 5, 10, 25, 50]   #5种面值</p><p>定义数组Min[ ] 记录最少硬币数量：<br>     对输入的某个金额i，Min[i]是最少的硬币数量。<br>第一步：只考虑1元面值的硬币</p><p><img src="https://s1.vika.cn/space/2023/03/25/0d0b8d02cdc848719452f8837535c3f9" alt="image-20230325142631537"></p><p>i&#x3D;1元时，等价于：i &#x3D; i-1 &#x3D; 0元需要的硬币数量，加上1个1元硬币。</p><p>其中把Min[]叫做“状态”,把Min[]的变化叫做“状态转移”</p><p>继续，所有金额仍然都只用1元硬币</p><ul><li>i&#x3D;2元时，等价于：i &#x3D; i-1 &#x3D; 1元需要的硬币数量，加上1个1元硬币。</li><li>i&#x3D;3元时…</li><li>i&#x3D;4元时…</li></ul><p>在1元硬币的计算结果基础上，再考虑加上5元硬币的情况。从i&#x3D;5开始就行了：</p><p><img src="https://s1.vika.cn/space/2023/03/25/4226c7657dcd4d30af57a4c7bb4df5ea" alt="image-20230325143011005"></p><p>i&#x3D;5元时，等价于：<br>（1）i &#x3D; i-5 &#x3D; 0元需要的硬币数量，加上1个5元硬币。Min[5]&#x3D;1。<br>（2）原来的Min[5]&#x3D;5。<br>取（1）（2）的最小值，所以Min[5]&#x3D;1。</p><ul><li>i&#x3D;6元时，等价于：<br>（1）i &#x3D; i - 5 &#x3D; 1元需要的硬币数量，加上1个5元硬币。 Min[6] &#x3D; 2<br>（2）原来的Min[6] &#x3D; 6<br>取（1）（2）的最小值，所以Min[6] &#x3D; 2</li><li>i&#x3D;7元时，…</li><li>i&#x3D;8元时，…</li></ul><p>那么递推关系就可以得出：</p><p>​Min[i] &#x3D; min(Min[i],Min[i-5] + 1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">s</span>):</span><br><span class="line">    Min = [<span class="built_in">int</span>(<span class="number">1e12</span>)]*(s+<span class="number">1</span>)      <span class="comment">#初始化为无穷大</span></span><br><span class="line">    Min[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cnt):         <span class="comment">#5种硬币</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">type</span>[j],s+<span class="number">1</span>):</span><br><span class="line">            Min[i] = <span class="built_in">min</span>(Min[i], Min[i - <span class="built_in">type</span>[j]] + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(Min[s])</span><br><span class="line"> </span><br><span class="line">cnt = <span class="number">5</span>                     <span class="comment">#5种硬币</span></span><br><span class="line"><span class="built_in">type</span> = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>]   <span class="comment">#5种面值</span></span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">solve(s)</span><br></pre></td></tr></table></figure><p>一般的动态规划题状态数组名为dp[]</p><h3 id="DP的两个特征"><a href="#DP的两个特征" class="headerlink" title="DP的两个特征"></a>DP的两个特征</h3><p>（1）重叠子问题。子问题是原大问题的小版本，计算步骤完全一样；计算大问题的时候，需要多次重复计算小问题。 </p><p>​一个子问题的多次计算，耗费了大量时间。用DP处理重叠子问题，每个子问题只需要计算一次，从而避免了重复计算，这就是DP效率高的原因。</p><p>（2）最优子结构。首先，大问题的最优解包含小问题的最优解；其次，可以通过小问题的最优解推导出大问题的最优解。</p><p>因为题解的状态树用数组来表示了，就可以很有效率的减小了复杂程度</p><h3 id="DP：记忆化"><a href="#DP：记忆化" class="headerlink" title="DP：记忆化"></a>DP：记忆化</h3><ul><li>如果各个子问题不是独立的，如果能够保存已经解决的子问题的答案，在需要的时候再找出已求得的答案，可以避免大量的重复计算。</li><li>基本思路：用一个表记录所有已解决的子问题的答案，不管该问题以后是否被用到，只要它被计算过，就将其结果填入表中。 </li><li>记忆化</li></ul><p><strong>DP的求解过程</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/0815fd7715a24ed0abdc8f7da42993a4" alt="image-20230325144301985"></p><h3 id="经典DP问题：0-x2F-1背包"><a href="#经典DP问题：0-x2F-1背包" class="headerlink" title="经典DP问题：0&#x2F;1背包"></a>经典DP问题：0&#x2F;1背包</h3><ul><li>给定n种物品和一个背包，物品i的重量是wi，其价值为vi，背包的容量为C。</li><li>背包问题：选择装入背包的物品，使得装入背包中物品的总价值最大</li><li>如果在选择装入背包的物品时，对每种物品i只有两种选择：装入背包或不装入背包，称为0&#x2F;1背包问题。</li></ul><p><img src="https://s1.vika.cn/space/2023/03/25/ed048229fed3476d9b82133dd4386b72" alt="image-20230325144453729"></p><p>例：有5个物品，重量分别是{2, 2, 6, 5, 4}，价值分别为{6, 3, 5, 4, 6}，背包的容量为10。<br>定义一个(n+1)×(C+1)的二维表dp[][]<br>dp[i][j]表示把前i个物品装入容量为j的背包中获得的最大价值。 </p><p><img src="https://s1.vika.cn/space/2023/03/25/dc11969c1c444b408a3d8ab58192b5a1" alt="image-20230325144518983"></p><p>填表：按只放第1个物品、只放前2个、只放前3个……一直到放完，这样的顺序考虑。(从小问题扩展到大问题)<br>1、只装第1个物品。(横向是递增的背包容量)</p><p><img src="https://s1.vika.cn/space/2023/03/25/0302fb2c67db4fb485a4595b61ce3ccf" alt="image-20230325144602800"></p><p>这里就只举一个装物品流程的例子了</p><p>2、<strong>只装前3个物品。</strong>如果第3个物品重量比背包大，那么不能装第3个物品，情况和只装第1、2个一样。<strong>如果第3个物品重量小于背包，那么：（1）如果把物品3装进去(重量是6)，那么相当于只把1、2装到(容量-6)的背包中。</strong>（2）如果不装3，那么相当于只把1、2装到背包中。  －取（1）和（2）的最大值。</p><p><img src="https://s1.vika.cn/space/2023/03/25/3dbdd0ce154f496d841a67831fdc5683" alt="image-20230325144757386"></p><p>2、<strong>只装前3个物品。</strong>如果第3个物品重量比背包大，那么不能装第3个物品，情况和只装第1、2个一样。如果第3个物品重量小于背包，那么：（1）如果把物品3装进去(重量是6)，那么相当于只把1、2装到(容量-6)的背包中。<strong>（2）如果不装3，那么相当于只把1、2装到背包中。  －取（1）和（2）的最大值。</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/e83ce834d04c4b0fa2fe9f83cf430cb6" alt="image-20230325144832353"></p><p>不装就代表直接继承了上一层装的东西了</p><p><strong>上正规例题</strong></p><p><img src="https://s1.vika.cn/space/2023/03/25/f666d114697e489fb366c186f0020bc2" alt="image-20230325145045338"></p><h3 id="DP状态设计"><a href="#DP状态设计" class="headerlink" title="DP状态设计"></a>DP状态设计</h3><p>DP状态：定义二维数组dp[][]，大小为N×C。<br>dp[i][j]：把前i个物品（从第1个到第i个）装入容量为j的背包中获得的最大价值。</p><p>把每个dp[i][j]]看成一个背包：背包容量为j，装1~i这些物品。最后得到的dp[N][C]就是问题的答案：把N个物品装进容量C的背包的最大价值。</p><h3 id="DP状态转移方程"><a href="#DP状态转移方程" class="headerlink" title="DP状态转移方程"></a>DP状态转移方程</h3><p>递推计算到dp[i][j]，分2种情况：<br>（1）第i个物品的体积比容量j还大，不能装进容量j的背包。那么直接继承前i-1个物品装进容量j的背包的情况即可：dp[i][j] &#x3D; dp[i-1][j]。<br>（2）第i个物品的体积比容量j小，能装进背包。又可以分为2种情况：装或者不装第i个。<br>1）装第i个。从前i-1个物品的情况下推广而来，前i-1个物品是dp[i-1][j]。第i个物品装进背包后，背包容量减少c[i]，价值增加w[i]。有：<br>    dp[i][j] &#x3D; dp[i-1][j-c[i]] + w[i]。<br>2）不装第i个。那么：dp[i][j] &#x3D; dp[i-1][j]。<br>取1）和2）的最大值，状态转移方程：<br>    dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - c[i]] + w[i])</p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n,C</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,C+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> c[i]&gt;j: dp[i][j] = dp[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:      dp[i][j] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>][j], dp[i-<span class="number">1</span>][j-c[i]]+w[i])</span><br><span class="line">    <span class="keyword">return</span> dp[n][C]   </span><br><span class="line"></span><br><span class="line">N=<span class="number">3011</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N)] </span><br><span class="line"><span class="comment">#或者这样写：dp = [[0]*N for j in range(N)]</span></span><br><span class="line">w = [<span class="number">0</span>]*N</span><br><span class="line">c = [<span class="number">0</span>]*N</span><br><span class="line">n, C = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    c[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(solve(n, C))</span><br></pre></td></tr></table></figure><h3 id="空间优化：滚动数组"><a href="#空间优化：滚动数组" class="headerlink" title="空间优化：滚动数组"></a>空间优化：滚动数组</h3><p>把dp[][]优化成一维的dp[]，以节省空间。<br>Dp[i][]是从上面一行dp[i-1]算出来的，第i行只跟第i-1行有关系，跟更前面的行没有关系：<br>      dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - c[i]] + w[i])</p><p>优化：只需要两行dp[0][]、dp[1][]，用新的一行覆盖原来的一行，交替滚动。</p><p>经过优化，空间复杂度从O(N×C)减少为O(C)。</p><p>两种滚动方式分别为：交替滚动和自我滚动。</p><h4 id="交替滚动"><a href="#交替滚动" class="headerlink" title="交替滚动"></a>交替滚动</h4><p>定义dp[2][j]：用dp[0][]和dp[1][]交替滚动。<br>优点：逻辑清晰、编码不易出错，建议初学者采用这个方法。<br>用now和old做索引：now始终指向正在计算的最新的一行，old指向已计算过的旧的一行。<br>对照原递推代码，now相当于i，old相当于i - 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n,C</span>):</span><br><span class="line">    now = <span class="number">0</span></span><br><span class="line">    old = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        old,now = now,old            <span class="comment">#交换</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,C+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> c[i] &gt; j:  dp[now][j] = dp[old][j]</span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">              dp[now][j] = <span class="built_in">max</span>(dp[old][j], dp[old][j-c[i]]+w[i])</span><br><span class="line">    <span class="keyword">return</span> dp[now][C]   </span><br><span class="line">N = <span class="number">3011</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]    <span class="comment">#注意先后</span></span><br><span class="line">w = [<span class="number">0</span>]*N</span><br><span class="line">c = [<span class="number">0</span>]*N</span><br><span class="line">n, C = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):   c[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(solve(n, C))</span><br></pre></td></tr></table></figure><p>省去了多层矩阵只需要两层即可，空间利用率大大增加</p><h4 id="自我滚动"><a href="#自我滚动" class="headerlink" title="自我滚动"></a>自我滚动</h4><p>继续精简：用一个一维的dp[]就够了，自己滚动自己。<br>       dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - c[i]] + w[i])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n,C</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (C,c[i]-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j-c[i]]+w[i])</span><br><span class="line">    <span class="keyword">return</span> dp[C]</span><br><span class="line">N = <span class="number">3011</span></span><br><span class="line">dp = [<span class="number">0</span>]*N</span><br><span class="line">w = [<span class="number">0</span>]*N</span><br><span class="line">c = [<span class="number">0</span>]*N</span><br><span class="line">n, C = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    c[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(solve(n, C))</span><br></pre></td></tr></table></figure><p>这里第二层循环从小到大循环是错的：</p><p><img src="https://s1.vika.cn/space/2023/03/25/e6b26dd6510547c9a16b282d8815af30" alt="image-20230325153723757"></p><p>例如i &#x3D; 2时，左图的dp[5]经计算得到dp[5] &#x3D; 9，把dp[5]更新为9。<br>右图中继续往后计算，当计算dp[8]时，得dp[8] &#x3D; dp[5]’ + 3 &#x3D; 9+3 &#x3D; 12，这个答案是错的。<br>错误的产生是滚动数组重复使用同一个空间引起的(计算dp时我需要调用上一层而且是小于j的位置，如果正向的话就会调用计算过之后的)。</p><p>从大到小循环是对的：</p><p><img src="https://s1.vika.cn/space/2023/03/25/6b879ac5752d427bb858631126715482" alt="image-20230325153927771"></p><p>例如i &#x3D; 2时，首先计算最后的dp[9] &#x3D; 9，它不影响前面状态的计算。</p><h2 id="深化背包问题"><a href="#深化背包问题" class="headerlink" title="深化背包问题"></a>深化背包问题</h2><p>0&#x2F;1背包简化版 （装箱问题）</p><p><img src="https://s1.vika.cn/space/2023/03/25/bd8b65ae8bf344fa897b0b9a29283ef6" alt="image-20230325154052023"></p><p>0&#x2F;1背包的简化版，不管物品的价格。把体积（不是价格）看成最优化目标：最大化体积(就是剩的最少最后输出V-dp[V])。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dp = [<span class="number">0</span>]*<span class="number">20010</span></span><br><span class="line">V = <span class="built_in">int</span>(<span class="built_in">input</span>()) </span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">c = [<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>): c[i]=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (V,c[i]-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j-c[i]]+c[i])</span><br><span class="line"><span class="built_in">print</span>(V-dp[V])</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a><strong>完全背包</strong></h3><p><img src="https://s1.vika.cn/space/2023/03/25/bc72242527564c509485b89243d27905" alt="image-20230325160512849"></p><ul><li>思路和0&#x2F;1背包类似。0&#x2F;1背包的每种物品只有1件，完全背包的每种物品有无穷多件，第i种可以装0件、1件、2件、C&#x2F;ci件。</li><li>定义dp[i][j]：把前i种物品（从第1种到第i种）装入容量为j的背包中获得的最大价值。</li><li>把每个dp[i][j]都看成一个背包：背包容量为j，装1~i这些物品。最后得到的dp[N][C]就是问题的答案：把N种物品装进容量C的背包的最大价值。</li><li>在0&#x2F;1背包问题中，每个物品只有拿与不拿两种；而完全背包问题，需要考虑拿几个。</li></ul><p>代码：</p><p>完全背包的代码和0&#x2F;1背包的代码相似，只多了一个k循环，用来遍历每种物品拿几个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">n,C</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>,C+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">1</span>:  dp[i][j] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:      dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,j//c[i]+<span class="number">1</span>):  <span class="comment">#k*c[i]&lt;=j  #在容量为j的背包中放k个</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - k * c[i]] + k * w[i])</span><br><span class="line">    <span class="keyword">return</span> dp[n][C]   </span><br><span class="line"></span><br><span class="line">N = <span class="number">3011</span></span><br><span class="line">dp = [[<span class="number">0</span>]*N <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">w = [<span class="number">0</span>]*N;  c = [<span class="number">0</span>]*N;    n, C = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):   c[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(solve(n, C))</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/03/25/7e94416618074ea0ba4013909503e86c" alt="image-20230325161028442"></p><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><p>分组背包问题：</p><ul><li>有一些物品，把物品分为n组，其中第i组第k个物品体积是c[i][k]，价值是w[i][k]；</li><li>每组内的物品冲突，每组内最多只能选出一个物品；</li><li>给定一个容量为C的背包，问如何选物品，使得装进背包的物品的总价值最大。</li></ul><p>解题思路：</p><p>与0&#x2F;1背包相似。</p><ul><li>0&#x2F;1背包dp[i][j]：把前i个物品（从第1个到第i个）装入容量为j的背包中获得的最大价值。</li><li>分组背包dp[i][j]：把前i组物品装进容量j的背包（每组最多选一个物品），可获得的最大价值。</li><li>状态转移方程：<br>    dp[i][j] &#x3D; max{dp[i-1][j], dp[i-1][j-c[i][k]] + w[i][k]}<br>   dp[i-1][j]表示第i组不选物品，dp[i-1][j-c[i][k]]表示第i组选第k个物品。<br>   求解方程需要做i、j、k的三重循环。</li></ul><p>状态转移方程：   dp[i][j] &#x3D; max{dp[i-1][j], dp[i-1][j-c[i][k]] + w[i][k]}<br>用滚动数组，变为：  dp[j] &#x3D; max{dp[j],      dp[j-c[i][k]]      + w[i][k]}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dp = [<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):             <span class="comment">#遍历每个组</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (C,-<span class="number">1</span>,-<span class="number">1</span>):      <span class="comment">#枚举容量</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,C+<span class="number">1</span>):     <span class="comment">#用k枚举第i组的所有物品</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= c[i][k]):      <span class="comment">#第k个物品能装进容量j的背包</span></span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-c[i][k]] + w[i][k])   <span class="comment">#第i组第k个</span></span><br><span class="line"><span class="built_in">print</span>(dp[C])</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>多重背包问题：</p><ul><li>给定n种物品和一个背包，第i种物品的体积是ci，价值为wi，并且有mi个，背包的总容量为C。</li><li>如何选择装入背包的物品，使得装入背包中的物品的总价值最大?</li><li>对比完全背包：一个容量为 C的背包，有 N 种物品，第i种物品的体积为 ci，价值为wi，每种物品都有无限多个。</li><li>两者非常相似。</li></ul><p>思路1：转化为0&#x2F;1背包</p><p><img src="https://s1.vika.cn/space/2023/03/25/583de458cbb045dba70e6523e93663c9" alt="image-20230325181906244"></p><p>思路2：直接DP</p><ul><li>定义状态dp[i][j]：表示把前i个物品装进容量j的背包，能装进背包的最大价值。</li><li>第i个物品分为装或不装两种情况，状态转移方程：<br>  dp[i][j] &#x3D; max{dp[i-1][j], dp[i-1][j-k<em>c[i]] + k</em>w[i]}<br>                1 ≤ k ≤ min{m[i], j&#x2F;c[i]}</li><li>直接写i、j、k三重循环，复杂度和第一种思路的复杂度一样，同样会超时。</li><li>对比完全背包：1 ≤ k ≤ j&#x2F;c[i]</li></ul><p>状态转移方程：   dp[i][j] &#x3D; max{dp[i-1][j], dp[i-1][j-k<em>c[i]] + k</em>w[i]}<br>用滚动数组，变为：  dp[j] &#x3D; max{dp[j],      dp[j-k<em>c[i]]      + k</em>w[i] }</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dp = [<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):                <span class="comment">#枚举物品</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (C,c[i]-<span class="number">1</span>,-<span class="number">1</span>):     <span class="comment">#枚举背包容量</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m[i]+<span class="number">1</span>):     <span class="comment">#用k遍历第i组的所有物品</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt;= k*c[i]):          <span class="comment">#第k个物品能装进容量j的背包</span></span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j-k*c[i]]+k*w[i])</span><br><span class="line"><span class="built_in">print</span>(dp[C])</span><br></pre></td></tr></table></figure><p>思路3：二进制拆分优化</p><p>一种极简单而有效的技巧。</p><p><img src="https://s1.vika.cn/space/2023/03/25/c1b9fbf45d26436f917845d805ed3be5" alt="image-20230325182149024"></p><ul><li>注意拆分的具体实现，不能全部拆成2的倍数，而是先按2的倍数从小到大拆，最后是一个小于等于最大倍数的余数。</li><li>保证拆出的数相加在[1, mi]范围内，不会大于mi。</li><li>例如mi &#x3D; 25，把它拆成1、2、4、8、10，最后是余数10，10 &lt; 16 &#x3D; 24，这5个数能组合成1~25内的所有数字，不会超过25。</li><li>如果把25拆成1、2、4、8、16，相加的范围就是[1, 31]了。</li></ul><p>多重背包例题：</p><p><img src="https://s1.vika.cn/space/2023/03/25/53580900728943a2879744f70cf2146c" alt="image-20230325182801673"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100010</span></span><br><span class="line">w =  [<span class="number">0</span>]*N;   c = [<span class="number">0</span>]*N;   m = [<span class="number">0</span>]*N</span><br><span class="line">xw = [<span class="number">0</span>]*N;  xc = [<span class="number">0</span>]*N;  xm = [<span class="number">0</span>]*N     <span class="comment">#新的</span></span><br><span class="line"></span><br><span class="line">n, C = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):   w[i], c[i],m[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="comment">#以下是二进制拆分</span></span><br><span class="line">xn = <span class="number">0</span>  <span class="comment">#二进制拆分后的新物品总数量</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= m[i]:         <span class="comment"># 例:m[i]=2       </span></span><br><span class="line">        m[i] -= j            <span class="comment">#减去已拆分的</span></span><br><span class="line">        xn+=<span class="number">1</span></span><br><span class="line">        xc[xn] = j*c[i]      <span class="comment">#新物品的体积</span></span><br><span class="line">        xw[xn] = j*w[i]</span><br><span class="line">        j &lt;&lt;= <span class="number">1</span>              <span class="comment">#二进制枚举：1,2,4...</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(m[i]&gt;<span class="number">0</span>):              <span class="comment">#最后一个是余数</span></span><br><span class="line">        xn += <span class="number">1</span></span><br><span class="line">        xc[xn] = m[i]*c[i]</span><br><span class="line">        xw[xn] = m[i]*w[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是滚动数组版本的0/1背包</span></span><br><span class="line">dp = [<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,xn+<span class="number">1</span>):              <span class="comment">#枚举物品</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (C,xc[i]-<span class="number">1</span>,-<span class="number">1</span>):   <span class="comment">#枚举背包容量</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j-xc[i]]+xw[i])</span><br><span class="line"><span class="built_in">print</span>(dp[C])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傅里叶变换</title>
      <link href="/2023/03/21/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
      <url>/2023/03/21/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>傅里叶变换</strong>是大家所熟知的正交变换。在一维信号处理中得到了广泛应用。把这种处理方法推广到图像处理中是很自然的事。这里将对傅里叶变换的基本概念及算法作一些简单的复习。</p><p>则有以下二式成立</p><p><img src="https://s1.vika.cn/space/2023/03/21/b68da5616a384493a57ae4c634f70ac5" alt="image-20230321174222350"></p><p>式子中x时时域变量，u是频率变量</p><p>令：</p><p><img src="https://s1.vika.cn/space/2023/03/21/f79368940a814571a4ae74088cbf5c57" alt="image-20230321174517509"></p><p><img src="https://s1.vika.cn/space/2023/03/21/a49ab28734c54d7e9f8e5954715c0b14" alt="image-20230321174556337"></p><p>通常把以上公式称为<strong>傅里叶变换对</strong>(互为傅里叶逆变换)</p><h2 id="傅里叶变换的定义及基本概念"><a href="#傅里叶变换的定义及基本概念" class="headerlink" title="傅里叶变换的定义及基本概念"></a>傅里叶变换的定义及基本概念</h2><p>傅里叶变换在数学中的定义是严格的。设f(x)为x的函数，如果满足下面的狄里赫莱条件：</p><ol><li>具有有限个间断点；</li><li>具有有限个极值点；</li><li>绝对可积。</li></ol><p>函数f(x)的傅里叶变换一般是一个复量，它可以由以下式子表示</p><p><img src="https://s1.vika.cn/space/2023/03/22/4cc08b26997b4138848d17e4dc2f2c6e" alt="image-20230322190904997"></p><p>或者写成指数形式</p><p><img src="https://s1.vika.cn/space/2023/03/22/5c84e6bd6cba451bbf3d25b0408e9a75" alt="image-20230322190957746"></p><p>把|F(w)|叫做f(x)的傅里叶谱，而<br>$$<br>\phi(\omega)<br>$$<br>叫做相位谱</p><p>例题：</p><p><img src="https://s1.vika.cn/space/2023/03/22/ff7df973dbef4795a6bf1dfce9777962" alt="image-20230322191344056"></p><p><img src="https://s1.vika.cn/space/2023/03/22/16019d459f394a918f96192434456325" alt="image-20230322191349692"></p><p>则</p><p><img src="https://s1.vika.cn/space/2023/03/22/2a09edd6dfea48a3bb1cb6a56080ffa4" alt="image-20230322191404065"></p><p><img src="https://s1.vika.cn/space/2023/03/22/e894f6b34dbf41918afe0d20d46e85ce" alt="image-20230322191429864"></p><p>则f(x)的幅度谱及相位谱：</p><p><img src="https://s1.vika.cn/space/2023/03/22/6baa05afeeb64f7b899d869061457251" alt="image-20230322191454084"></p><p>由上面例子可以建立下面的概念：</p><ol><li>只要满足狄里赫莱条件，连续函数就可以进行傅里叶变换，实际上这个条件在工程运用中总是可以满足的。</li><li>连续非周期函数的傅里叶谱是连续的非周期函数，连续的周期函数的傅里叶谱是离散的非周期函数。</li></ol><p>傅里叶变换可推广到二维函数。如果二维函数f(x,y)满足狄里赫莱条件，那么将有下面二维傅里叶<br>变换对存在：</p><p><img src="https://s1.vika.cn/space/2023/03/22/f86803c340dc4b3c8a16b8f68292efb6" alt="image-20230322191647938"></p><p><img src="https://s1.vika.cn/space/2023/03/22/b4c7a67a9b764a46b2db53668426c6c1" alt="image-20230322191655978"></p><h2 id="傅里叶变换的性质"><a href="#傅里叶变换的性质" class="headerlink" title="傅里叶变换的性质"></a>傅里叶变换的性质</h2><p>傅里叶变换有许多重要性质。这些性质为实际运算处理提供了极大的便利。这里，仅就二维傅里叶变换为例列出其主要的几个性质。</p><ol><li>可分性</li><li>线性</li><li>共轭对称性</li><li>旋转性</li><li>比例变换特性</li><li>怕斯维尔(Parseval)定理</li><li>相关定理</li><li>卷积定理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2023/03/16/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2023/03/16/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>在写主要内容之前先说说线段树应用的背景：</p><ul><li>考核最多的高级数据结构</li><li>从初级水平到中级水平的标志：在掌握线段树之后才能说“我真正进入了算法竞赛的大门。”</li><li>应用背景：区间修改、区间查询、区间合并。</li></ul><h2 id="1、区间最值问题RMQ-Range-Minimum-x2F-Maximum-Query"><a href="#1、区间最值问题RMQ-Range-Minimum-x2F-Maximum-Query" class="headerlink" title="1、区间最值问题RMQ(Range Minimum&#x2F;Maximum Query)"></a>1、区间最值问题RMQ(Range Minimum&#x2F;Maximum Query)</h2><p>长度为n的数列{a1,a2,….,an}</p><ol><li>求最值：给定i,j &lt;&#x3D; n, 求{ai,…,aj}区间内的最值。</li><li>修改元素：给定k和x，把a[k]改成x</li></ol><h3 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="(1)暴力法"></a>(1)暴力法</h3><ul><li>用普通数组存储数列：<br>查询最值：区间内的最值，复杂度O(n)<br>修改元素：复杂度 O(1)</li></ul><p>暴力法复杂度：如果有m次“修改元素+查询最值”，总复杂读O(mn)。m,n&gt;10^5, O(mn) &gt;10^10。</p><h3 id="2-高效的办法：线段树"><a href="#2-高效的办法：线段树" class="headerlink" title="(2)高效的办法：线段树"></a>(2)高效的办法：线段树</h3><ul><li>用线段树，对n个数进行m次“修改元素+查询最值”，复杂度：O(mlogn)</li><li>线段树：一种用于区间处理的数据结构。</li><li>基于二叉树。</li></ul><p><img src="https://s1.vika.cn/space/2023/03/18/43ad7106671d4f8087ea4bf78dd847c8" alt="image-20230318185803518"></p><h3 id="3-把数列放在二叉树上"><a href="#3-把数列放在二叉树上" class="headerlink" title="(3)把数列放在二叉树上"></a>(3)把数列放在二叉树上</h3><ul><li>例：查询{1, 2, 5, 8, 6, 4 ,3}的最小值</li><li>首先，把数放在二叉树上：</li></ul><p><img src="https://s1.vika.cn/space/2023/03/18/36edb3eaa1d141669ab71083bd0922f1" alt="image-20230318191944987"></p><ul><li>每个结点上的数字是这个结点的子树的最小值。</li><li>那么经思考，查询某个区间的最小值，只需要O(logn)次。</li><li>思考：如何在二叉树上定位某个区间？</li></ul><h2 id="2、线段树的构造"><a href="#2、线段树的构造" class="headerlink" title="2、线段树的构造"></a>2、线段树的构造</h2><ul><li>线段树是建立在线段（或者区间）基础上的树，树的每个结点代表一条线段（或者称为区间）[L, R]。</li><li>例：线段[1, 5]的线段树。</li></ul><p><img src="https://s1.vika.cn/space/2023/03/18/f3979ce502674d4ba8c7c191bfb6f6dd" alt="image-20230318192255032"></p><ul><li>线段[L, R]：L是左子结点，R是右子结点。<br>（1）L &#x3D; R。它是一个叶子结点。<br>（2）L &lt; R。有两个儿子，左儿子代表区间[L, M]，右儿子代表区间[M+1, R]，其中M &#x3D; (L + R) &#x2F; 2。</li></ul><p><strong>【线段树的复杂度】</strong></p><ul><li>每步处理，从二叉树的根结点开始到最下一层，最多需要更新 log4n 个结点，复杂度 O(logn)；</li><li>一共有 n 个数字需要处理，总复杂度 O(nlogn)。</li><li>线段树把 n 个数按二叉树进行分组，每次更新有关的结点时，这个结点下面的所有子结点都隐含被更新了，从而大大地减少了处理次数。</li></ul><p>最多需要更新log4n个结点是因为，线段树采取的时静态数组，若为完全二叉树，需要多开辟一行，故为4n。</p><p><strong>【区间查询】</strong></p><ul><li>区间查询问题（最值、区间和）是线段树的一个基本应用场景。</li><li>以数列{1, 4, 5, 8, 6, 2, 3, 9, 10, 7}为例。</li><li>首先建立一棵用完全二叉树实现的线段树，用于查询任意子区间的最小值。</li><li>每个结点上圆圈内的数字是这棵子树的最小值。</li><li>圆圈旁边的数字，例如根结点的”1:[1,10]”，1表示结点的编号，[1,10]是这个结点代表的元素范围，即第1到第10个元素。</li></ul><p><img src="https://s1.vika.cn/space/2023/03/18/17b8d7c2ee1a4237997ef913489f55b8" alt="image-20230318193727536"></p><p>查询任意区间[i, j]的最小值</p><ul><li>例：查区间[4, 9]的最小值</li><li>递归查询到区间[4, 5]、[6, 8]、[9, 9]，见图中画横线的线段，得最小值min{6, 2, 10} &#x3D; 2。查询在O(logn)时间内完成。</li><li>线段树高效的原因：每个结点的值，代表了以它为根的子树上所有结点的值。查询这个子树的值时，不必遍历整棵树，而是直接读这个子树的根。</li><li>m次“单点修改+区间查询”的总复杂度O(mlogn)。</li></ul><p>用数组tree[]实现一颗满二叉树。每个结点的左右儿子：</p><ul><li>左儿子：p&lt;&lt;1，即p<em>2。<br>例：根tree[1]的左儿子是tree[2]，结点tree[12]的左儿子是tree[24]。</em></li><li>右儿子：p&lt;&lt;1|1，即p*2+1。<br>例：根tree[1]的右儿子是tree[3]，结点tree[12]的左儿子是tree[25]。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义根结点是tree[1]，即编号为1的结点是根</span></span><br><span class="line">tree = [<span class="number">0</span>]*(N&lt;&lt;<span class="number">2</span>) <span class="comment">#用tree[i]记录线段i的最值或区间和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#父子关系，p是父 </span></span><br><span class="line">tree[p&lt;&lt;<span class="number">1</span>]     <span class="comment">#左儿子，编号 p*2</span></span><br><span class="line">tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]   <span class="comment">#右儿子，编号 p*2+1 </span></span><br></pre></td></tr></table></figure><h2 id="3、线段树的修改"><a href="#3、线段树的修改" class="headerlink" title="3、线段树的修改"></a>3、线段树的修改</h2><ol><li>点修改：在线段树中每次只修改一个点</li><li>区间修改：每次修改一个区间的所有数</li></ol><h3 id="1-重点：区间修改"><a href="#1-重点：区间修改" class="headerlink" title="(1) 重点：区间修改"></a>(1) 重点：区间修改</h3><ul><li>给定n个元素{a1, a2, … , an} ：</li><li>修改（加）：给定i, j&lt;&#x3D;n，把{ai, …, aj}区间内的每个元素加v。</li><li>查询：给定L, R&lt;&#x3D;n，计算{aL, …, aR}的区间和。</li></ul><p>多的不说，上例题：<br><img src="https://s1.vika.cn/space/2023/03/20/5f3c45ab9c764e198cb4ea571e735457" alt="image-20230320161224835"></p><p>下面来说解题思路和步骤</p><ol><li><p>初始建一颗空树</p><ul><li><p>build(p,pl,pr)：p是tree[p]，即建立以tree[p]为根的一棵子树，它代表区间[pl, pr]。</p></li><li><p>build()函数是一个递归函数，递归到最底的叶子结点，赋初始值tree[p] &#x3D; -INF，即一个极小的值。本题是求最大值，把每个结点赋值为极小。</p></li><li><p>建树用二分法，从根结点开始逐层二分到叶子结点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">p,pl,pr</span>):</span><br><span class="line">    <span class="keyword">if</span> pl == pr:</span><br><span class="line">        tree[p] = -INF</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">   mid = (pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>,pl,mid)<span class="comment">#左儿子</span></span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr)<span class="comment">#右儿子</span></span><br><span class="line">    tree[p] = <span class="built_in">max</span>(tree[p&lt;&lt;<span class="number">1</span>],tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])<span class="comment">#push_up</span></span><br></pre></td></tr></table></figure></li><li><p>push_up：体现了线段树的精髓。</p></li><li><p>作用：把底层的值递归返回，赋值给上层结点。线段树的每个结点，代表了以这个结点为根的子树的最大值（本题是求最大值，有的题目是求区间和）</p></li><li><p>push_up利用递归函数的回溯，完成了这一任务。</p></li></ul></li><li><p>更新线段树</p><ul><li><p>update(p,pl,pr,L,R,d)是通用模板。p表示结点tree[p]，pl是左子树，pr是右子树。区间[L, R]是需要更新的区间。d是修改或更新。</p></li><li><p>本题的更新功能是新增一个结点，有两个步骤。<br>1）把这个结点放在二叉树的叶子上。在本题中这样使用：<br>update(1, 1, N, cnt, cnt, (x+t)%D);<br> 作用：把[cnt, cnt]区间的值赋值为(x+t)%D。<br> 因为[cnt, cnt]这个区间只包含tree[cnt]一个结点，所以它是对新增叶子结点tree[cnt]赋值。<br>2）新增这个结点导致它上层结点的变化，需要把变化上传到上层结点。通过push_up，把变化递归到上层。</p><p>3）把这个结点放在二叉树的叶子上。update(1, 1, N, cnt, cnt, (x+t)%D</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">p,pl,pr,L,R,d</span>):</span><br><span class="line">    <span class="keyword">if</span> L&lt;=pl <span class="keyword">and</span> pr&lt;=R:</span><br><span class="line">        tree[p] = d</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid = (pl+pr)&lt;&lt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L&lt;=mid</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询</p><ul><li><p>查询区间[L, R]的最大值。函数query(p, pl, pr, L, R)查询以p为根的子树，这棵子树内区间[L, R]的最大值。<br>  1）如果这棵子树完全被[L, R]覆盖，也就是说这棵子树在要查询的区间之内，那么直接返回tree[p]的值。这一步体现了线段树的高效率。</p><p>如果不能覆盖，那么需要把这棵子树二分，再继续下面两步的查询。<br>2）如果L与左部分有重叠。<br>3）如果R与右部分右重叠。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">p,pl,pr,L,R</span>):</span><br><span class="line">    res = -INF</span><br><span class="line">    <span class="keyword">if</span> L&lt;=pl <span class="keyword">and</span> pr&lt;=R:<span class="keyword">return</span> tree[p]</span><br><span class="line">    mid = (pl+pr)&lt;&lt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L &lt;= mid:res = <span class="built_in">max</span>(res,query(p&lt;&lt;<span class="number">1</span>,pl,mid,L,R))</span><br><span class="line">    <span class="keyword">if</span> R &gt; mid:res = <span class="built_in">max</span>(res,query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid,pr,L,R))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">100001</span></span><br><span class="line">INF = <span class="number">0X7FFFFFFF</span></span><br><span class="line">tree = [<span class="number">0</span>]*(N&lt;&lt;<span class="number">2</span>)              <span class="comment">#4倍</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">p,pl,pr</span>):</span><br><span class="line">    <span class="keyword">if</span> pl==pr:</span><br><span class="line">        tree[p] = -INF  </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid=(pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>,pl,mid)         <span class="comment">#p&lt;&lt;1 是左儿子</span></span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr)     <span class="comment">#p&lt;&lt;1|1是右儿子</span></span><br><span class="line">    tree[p] = <span class="built_in">max</span>(tree[p&lt;&lt;<span class="number">1</span>],tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])  <span class="comment">#push_up</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">p,pl,pr,L,R,d</span>):</span><br><span class="line">    <span class="keyword">if</span> L&lt;=pl <span class="keyword">and</span> pr&lt;=R:</span><br><span class="line">        tree[p]=d</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid =(pr+pl)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L&lt;=mid:    update(p&lt;&lt;<span class="number">1</span>,pl,mid,L,R,d)</span><br><span class="line">    <span class="keyword">if</span> R&gt; mid:    update(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr,L,R,d)</span><br><span class="line">    tree[p]=<span class="built_in">max</span>(tree[p&lt;&lt;<span class="number">1</span>],tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">p,pl,pr,L,R</span>):</span><br><span class="line">    res = -INF</span><br><span class="line">    <span class="keyword">if</span> L&lt;=pl <span class="keyword">and</span> pr&lt;=R:  <span class="keyword">return</span> tree[p]</span><br><span class="line">    mid=(pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L&lt;=mid:   res=<span class="built_in">max</span>(res,query(p&lt;&lt;<span class="number">1</span>,pl,mid,L,R))</span><br><span class="line">    <span class="keyword">if</span> R&gt; mid:   res=<span class="built_in">max</span>(res,query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr,L,R))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">m,D = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,N)  <span class="comment">#不用build()，这样写也行：update(1,1,N,1,N,-INF)</span></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">t=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    op = <span class="built_in">list</span>(<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">        update(<span class="number">1</span>,<span class="number">1</span>,N,cnt,cnt,(<span class="built_in">int</span>(op[<span class="number">1</span>])+t)%D)</span><br><span class="line">    <span class="keyword">if</span> op[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        t=query(<span class="number">1</span>,<span class="number">1</span>,N,cnt-<span class="built_in">int</span>(op[<span class="number">1</span>])+<span class="number">1</span>,cnt)</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>注：目前这种方法几乎只能用单点修改，因为在进行update时，只修改了本层和上层的点，但是该节点下层的点并没有修改，但是在做题时用这种方式做单点修改非常便捷。那么为解决这个问题，我们引出线段树的核心技术：lazy-tag</p><h2 id="4、线段树的核心技术：lazy-tag"><a href="#4、线段树的核心技术：lazy-tag" class="headerlink" title="4、线段树的核心技术：lazy-tag"></a>4、线段树的核心技术：lazy-tag</h2><ul><li>背景：区间修改</li><li>简单区间修改，例如对一个数列的[L, R]区间内每个元素统一加上d。<br>如果在线段树上用“单点修改”一个个修改这些元素，一次区间修改O(nlogn) ，还不如直接暴力修改的O(n)。</li><li>解决办法，利用线段树的特征：线段树的结点tree[i]，记录了i这个区间的值。<br>再定义一个tag[i]，用它统一记录i这个区间的修改，而不是一个个修改区间内的每个元素<br>这个办法被称为“lazy-tag”。一次区间修改O(logn)。</li></ul><h3 id="1-lazy-tag（懒惰标记，或者延迟标记"><a href="#1-lazy-tag（懒惰标记，或者延迟标记" class="headerlink" title="(1) lazy-tag（懒惰标记，或者延迟标记)"></a>(1) lazy-tag（懒惰标记，或者延迟标记)</h3><ul><li>修改一个线段区间时，只对这个线段区间进行整体修改（把修改记录在子树的根结点上），其内部每个元素的内容先不做修改。</li><li>当这个线段区间的一致性被破坏时，才把变化值传递给下一层。</li><li>复杂度：每次区间修改的复杂度是O(logn)的。</li></ul><p>新的update()</p><p><strong>update()中的lazy-tag</strong></p><p>例：把[4, 9]区间内的每个元素加3：<br>（1）左子树递归到结点5，即区间[4, 5]，完全包含在[4, 9]内，打标记tag[5] &#x3D; 3，更新tree[5]为20，不再继续深入；<br>（2）左子树递归返回，更新tree[2]为30；<br>（3）右子树递归到结点6，即区间[6, 8]，完全包含在[4, 9]内，打标记tag[6]&#x3D;3，更新tree[6]为23。<br>（4）右子树递归到结点14，即区间[9, 9]，打标记tag[14]&#x3D;3，更新tree[14]&#x3D;13；<br>（5）右子树递归返回，更新tree[7]&#x3D;20；继续返回，更新tree[3]&#x3D;43；<br>（6）返回到根结点，更新tree[1]&#x3D;73。</p><p>给[4,9]区间内每个元素加3 流程图</p><p><img src="https://s1.vika.cn/space/2023/03/20/6150624d83f54f0ca694fc104d44de8c" alt="image-20230320172714755"></p><p>这里需要注意一个点：</p><ul><li><p>如果发生多次修改同一个节点上的tag会发生多次修改，导致冲突。</p></li><li><p>例如做2次区间修改，一次是[4, 9]，一次是[5, 8]，它们都会影响5:[4, 5]这个结点。</p><p>第一次修改[4, 9]覆盖了结点5，用tag[5]做了记录；<br>第二次修改[5, 8]不能覆盖结点5，需要再向下搜到结点11:[5, 5]，从而破坏了tag[5]，此时原tag[5]记录的区间统一修改就不得不往它的子结点传递和执行了，传递后tag[5]失去了用途，需要清空。</p></li></ul><h3 id="2-push-down"><a href="#2-push-down" class="headerlink" title="(2) push-down"></a>(2) push-down</h3><ul><li>lazy-tag的主要操作是解决多次区间修改的冲突，用push_down()函数完成。</li><li>它首先检查结点p的tag[p]，如果有值，说明前面做区间修改时给p打了tag标记，接下来就把tag[p]传给左右子树，然后把tag[p]清零。</li><li>push_down()函数不仅在“区间修改”中用到，在“区间查询”中同样用到。</li></ul><p>区间修改，又来了</p><p><img src="https://s1.vika.cn/space/2023/03/20/32c2f84a35e24cd9bbec8c707d26c186" alt="image-20230320193745279"></p><p>带lazy-tag的基本操作</p><ol><li><p>build()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">p,pl,pr</span>):<span class="comment">#建树</span></span><br><span class="line">    <span class="keyword">if</span> p1 == pr:</span><br><span class="line">        tree[p] = a[pl]</span><br><span class="line">    mid = (pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">    build(p&gt;&gt;<span class="number">1</span>,pl,mid)</span><br><span class="line">    build(p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr)</span><br><span class="line">    tree[p] = tree[p&gt;&gt;<span class="number">1</span>] + tree[p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>]<span class="comment">#push_up(p)</span></span><br></pre></td></tr></table></figure><p>死记就行了</p></li><li><p>update()</p><p>update()函数更新区间的值，把区间内所有元素的值加上d。<br>如果tree[p]这棵子树完全被包含在需要修改的区间[L, R]中，只需要对根tree[p]打上标记即可，不用修改p的子结点。 若再需要对下层操作时，函数中的push_down()会先向下传递lazy-tag也就是说：</p><p>​update()函数更新区间的值，把区间内所有元素的值加上d。<br>​如果tree[p]这棵子树不能完全被包含在需要修改的区间[L, R]中，需要解决多次修改的冲突问题，用push_down()实现。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">L,R,p,pl,pr,d</span>):</span><br><span class="line">    <span class="keyword">if</span> L&lt;=p1 <span class="keyword">and</span> R&gt;=pr:</span><br><span class="line">        addtag(p,pl,pr,d)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    push_down(p,pl,pr)<span class="comment">#将懒标记传递给孩子</span></span><br><span class="line">    mid = (pl+pr)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> L &lt;= mid: update(L,R,p&gt;&gt;<span class="number">1</span>,pl,mid,d)</span><br><span class="line">    <span class="keyword">if</span> R &gt;= mid+<span class="number">1</span>: update(L,R,p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr,d)</span><br><span class="line">    tree[p] = tree[p&gt;&gt;<span class="number">1</span>] + tree[p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>]</span><br><span class="line">update(L,R,<span class="number">1</span>,<span class="number">1</span>,n,d)</span><br></pre></td></tr></table></figure></li><li><p>addtag()</p><p>给当前节点打上标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addtag</span>(<span class="params">p,pl,pr,d</span>):</span><br><span class="line">    tag[p] += d</span><br><span class="line">    tree[p] += d*(pr-pl+<span class="number">1</span>)<span class="comment">#子节点个数</span></span><br></pre></td></tr></table></figure></li><li><p>push_down()</p><p>解决tag的冲突问题。把tag分别传给左右子树。<br>注意：tag应该持续向下传递，直到能覆盖区间为止。但是push_down()只向下传递了一次。因为使用push_down()的update()是个递归函数，update()会在递归时一层层地用push_down()来传递tag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">push_down</span>(<span class="params">p,pl,pr</span>):</span><br><span class="line">    <span class="keyword">if</span> tag[p] &gt; <span class="number">0</span>:<span class="comment">#右tag标记才传给下一层</span></span><br><span class="line">        mid = (pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">        addtag(p&gt;&gt;<span class="number">1</span>,pl,mid,tag[p])<span class="comment">#把tag标记传递给左</span></span><br><span class="line">        addtag(p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr,tag[p])<span class="comment">#把tag标记传递给右</span></span><br><span class="line">        tag[p] = <span class="number">0</span><span class="comment">#p自己的tag被传走了，归0</span></span><br></pre></td></tr></table></figure></li><li><p>query()</p><p>查询区间和。查询若遇到tag，用push_down()来处理tag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">L,R,p,pl,pr</span>):</span><br><span class="line">    <span class="keyword">if</span> L &lt;= pl <span class="keyword">and</span> R &gt;= pr: <span class="keyword">return</span> tree[p]</span><br><span class="line">    push_down(p,pl,pr)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    mid = (pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L &lt;= mid:res += query(L,R,p&gt;&gt;<span class="number">1</span>,pl,mid)</span><br><span class="line">    <span class="keyword">if</span> R &gt; mid:res += query(L,R,p&gt;&gt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(query(L,R,<span class="number">1</span>,<span class="number">1</span>,n))</span><br></pre></td></tr></table></figure></li></ol><p>完整的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">p, pl, pr</span>):                <span class="comment"># 建树</span></span><br><span class="line">    <span class="keyword">if</span> pl == pr:</span><br><span class="line">        tree[p] = a[pl]</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    mid = (pl + pr) &gt;&gt; <span class="number">1</span></span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>,   pl,      mid)</span><br><span class="line">    build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, pr)</span><br><span class="line">    tree[p] = tree[p&lt;&lt;<span class="number">1</span>] + tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]     <span class="comment">#push_up(p)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addtag</span>(<span class="params">p,pl,pr,d</span>):              <span class="comment">#给结点p打tag标记，并更新tree</span></span><br><span class="line">    tag[p]  += d;                   <span class="comment">#打上tag标记</span></span><br><span class="line">    tree[p] += d*(pr-pl+<span class="number">1</span>);         <span class="comment">#计算新的tree </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_down</span>(<span class="params">p, pl, pr</span>):</span><br><span class="line">    <span class="keyword">if</span> tag[p]&gt;<span class="number">0</span>:                      <span class="comment">#有tag标记，这是以前做区间修改时留下的</span></span><br><span class="line">       mid = (pl+pr)&gt;&gt;<span class="number">1</span></span><br><span class="line">       addtag(p&lt;&lt;<span class="number">1</span>,pl,mid,tag[p])     <span class="comment">#把tag标记传给左子树</span></span><br><span class="line">       addtag(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,pr,tag[p]) <span class="comment">#把tag标记传给右子树</span></span><br><span class="line">       tag[p]=<span class="number">0</span>                       <span class="comment">#p自己的tag被传走了，归0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">L, R, p, pl, pr, d</span>):</span><br><span class="line">    <span class="keyword">if</span> L&lt;=pl <span class="keyword">and</span> R&gt;=pr:</span><br><span class="line">        addtag(p, pl, pr,d)</span><br><span class="line">        <span class="keyword">return</span>     </span><br><span class="line">    push_down(p, pl, pr)  <span class="comment"># 将懒惰标记传递给孩子</span></span><br><span class="line">    mid = (pl + pr) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L &lt;= mid:     update(L, R, p&lt;&lt;<span class="number">1</span>,   pl,    mid,d)</span><br><span class="line">    <span class="keyword">if</span> R &gt;= mid + <span class="number">1</span>: update(L, R, p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, pr, d)</span><br><span class="line">    tree[p] = tree[p&lt;&lt;<span class="number">1</span>] + tree[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]         <span class="comment">#push_up(p)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">L, R, p, pl, pr</span>):    </span><br><span class="line">    <span class="keyword">if</span> L &lt;= pl <span class="keyword">and</span> R &gt;= pr:   <span class="keyword">return</span> tree[p]    </span><br><span class="line">    push_down(p, pl, pr)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    mid = (pl + pr) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L &lt;= mid:  res += query(L, R, p&lt;&lt;<span class="number">1</span>,   pl,   mid,)</span><br><span class="line">    <span class="keyword">if</span> R &gt;  mid:  res += query(L, R, p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>,pr)    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">a = [<span class="number">0</span>] + <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">tag  = [<span class="number">0</span>]* (<span class="built_in">len</span>(a)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">tree = [<span class="number">0</span>]* (<span class="built_in">len</span>(a)&lt;&lt;<span class="number">2</span>)</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n)             <span class="comment"># 建树</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    w = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(w) == <span class="number">3</span>:      <span class="comment"># 区间询问：[L,R]的区间和</span></span><br><span class="line">        q, L, R = w       </span><br><span class="line">        <span class="built_in">print</span>(query(L,R,<span class="number">1</span>,<span class="number">1</span>,n))</span><br><span class="line">    <span class="keyword">else</span>:                <span class="comment"># 区间修改：把[L,R]的每个元素加上d</span></span><br><span class="line">        q, L, R, d = w </span><br><span class="line">        update(L,R,<span class="number">1</span>,<span class="number">1</span>,n,d)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像的基本运算</title>
      <link href="/2023/03/14/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
      <url>/2023/03/14/%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="图像像素的距离"><a href="#图像像素的距离" class="headerlink" title="图像像素的距离"></a>图像像素的距离</h1><p>在说基本运算之前，先把图像像素间的距离说一下（不想再写一篇了🤣）</p><h2 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h2><h3 id="相邻像素——4邻域"><a href="#相邻像素——4邻域" class="headerlink" title="相邻像素——4邻域"></a>相邻像素——4邻域</h3><ul><li>4邻域：像素p(x,y)的4邻域是： (x+1,y)；(x-1,y)；(x,y+1)；(x,y-1)</li><li>用N4（p）表示像素p的4邻域</li></ul><p><img src="https://s1.vika.cn/space/2023/03/14/8983dd977acf4b7088615c5c71d63d48" alt="image-20230314165042002"></p><h3 id="相邻像素——D邻域"><a href="#相邻像素——D邻域" class="headerlink" title="相邻像素——D邻域"></a>相邻像素——D邻域</h3><ul><li>D邻域（ diagonal ）定义：像素p(x,y)的D邻域是：对角上的点 (x+1,y+1)；(x+1,y-1)；(x-1,y+1)；(x-1,y-1)</li><li>用ND（p）表示像素p的D邻域 :</li></ul><p><img src="https://s1.vika.cn/space/2023/03/14/1a874d0736944b7aa649ee5d3c46e467" alt="image-20230314165146607"></p><h3 id="相邻像素——8邻域"><a href="#相邻像素——8邻域" class="headerlink" title="相邻像素——8邻域"></a>相邻像素——8邻域</h3><ul><li>8邻域定义：像素p(x,y)的8邻域是：4邻域的点 ＋ D邻域的点</li><li>用N8§表示像素p的8邻域。<br>-N8（p）&#x3D; N4（p）+ ND（p）</li></ul><p><img src="https://s1.vika.cn/space/2023/03/14/876aee17fd4d48509412cabda7f02bf4" alt="image-20230314165232949"></p><h2 id="邻接性"><a href="#邻接性" class="headerlink" title="邻接性"></a>邻接性</h2><ul><li>邻接性是描述区域和边界的重要概念</li><li>两个像素邻接的两个必要条件是：<br><strong>两个像素的位置是否相邻</strong><br><strong>两个像素的灰度值是否满足特定的相似性准则（或者是否相等）都属于V</strong></li></ul><h3 id="像素间的邻接性——4邻接"><a href="#像素间的邻接性——4邻接" class="headerlink" title="像素间的邻接性——4邻接"></a>像素间的邻接性——4邻接</h3><p>对于具有值V的像素p和q，如果q在集合N4（p）中，则称这两个像素是4邻接的。</p><p><img src="https://s1.vika.cn/space/2023/03/14/24fcf6e3a7c44593881173d3490f2308" alt="image-20230314165408072"></p><h2 id="像素间的邻接性——8邻接"><a href="#像素间的邻接性——8邻接" class="headerlink" title="像素间的邻接性——8邻接"></a>像素间的邻接性——8邻接</h2><p>对于具有值V的像素p和q，如果q在集合N8（p）中，则称这两个像素是8邻接的 。</p><p><img src="https://s1.vika.cn/space/2023/03/14/319b9c416d314a5e9149aeed9e47aa4f" alt="image-20230314165437623"></p><h2 id="像素间的邻接性——m邻接"><a href="#像素间的邻接性——m邻接" class="headerlink" title="像素间的邻接性——m邻接"></a>像素间的邻接性——m邻接</h2><p>对于具有值V的像素p和q，如果：</p><ul><li>q在集合N4(p）中，或</li><li>q在集合ND（p）中，并且N4（p）与N4(q)的交集为空（没有值V的像素）。则称这两个像素是m邻接的，即4邻接和D邻接的混合连通</li></ul><p><img src="https://s1.vika.cn/space/2023/03/14/5d47e76654b24ce7916e9589a394e8b6" alt="image-20230314165845323"></p><p>以上也是8邻接与m邻接的区别</p><h2 id="通路"><a href="#通路" class="headerlink" title="通路"></a>通路</h2><p>定义：一条从具有坐标(x,y)的像素p,到具有坐标(s,t)的像素q的通路。<br>(x0,y0),(x1,y1),…,(xn,yn)的不同像素的序列。其中，(x0,y0) &#x3D; (x,y)，(xn,yn) &#x3D; (s,t)，(xi,yi) 和(xi-1,yi-1)是邻接的，1 ≤ i ≤ n，n是路径的长度。如果(x0,y0) &#x3D; (xn,yn) ,则该通路是闭合通路<br>可依据特定的邻接类型定义4通路、8通路和m通路。</p><p>不出例题演示了，当寻找终点时切记若有对角邻接则要先走对角</p><h2 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h2><p>令S是图像中的一个像素子集。如果在S中全部像素之间存在一个通路，则可以说p和q在S中是连通（connected）的。对于S中的任何像素p，S中连通到该像素的像素集称为S的连通分量。如果S仅有一个连通分量，则集合S称为连通集(connected set)。</p><p>连通域存能走的通路（集合形式）</p><h2 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h2><h3 id="像素距离的定义"><a href="#像素距离的定义" class="headerlink" title="像素距离的定义"></a>像素距离的定义</h3><p>对于像素p(x , y),q(s , t),z(v , w),用D(p , q)来表示像素p , q间的距离，像素间距离的（D(x , y)应满足的如下条件：</p><ol><li>D(p , q) ≥ 0.（当且仅当p &#x3D; q）;</li><li>D(p , q) &#x3D; D(q , p);</li><li>D(p , q) + D(q , z) ≥ D(p , z);</li></ol><h3 id="像素距离的分类及计算方法"><a href="#像素距离的分类及计算方法" class="headerlink" title="像素距离的分类及计算方法"></a>像素距离的分类及计算方法</h3><p>像素p(x,y)和q(s,t)间的欧式距离定义：</p><p><img src="https://s1.vika.cn/space/2023/03/14/5decfbf97b1b401d984801f197fad6f5" alt="image-20230314170508480"></p><p>欧式距离就是数学中学到的直线距离公式</p><p>像素p(x,y)和q(s,t)间的D4距离（城区距离）定义:</p><p><img src="https://s1.vika.cn/space/2023/03/14/3bf452e3264749de8d4cab8273b92af3" alt="image-20230314170520546"></p><p><img src="https://s1.vika.cn/space/2023/03/14/0c7d0efa2ad44d96b88612da9534baa9" alt="image-20230314170959966"></p><p>D4模型只能走横竖两个方向，不能走斜向。两个点的距离就是横向加竖向的距离之和。</p><p>像素p(x,y)和q(s,t)间的D8（街区距离）距离定义:</p><p><img src="https://s1.vika.cn/space/2023/03/14/faebce2bc6c54ce58b8fa455395fbe5b" alt="image-20230314170532518"></p><p>D8的模型就是围着P点的所有元素都是相邻的，也就是它下一步可以走到包围它的八个点的任何一个，也就是横竖和斜向。</p><p>对于可以横竖和斜向走的最短距离，就是横向或竖向的距离的最大值。</p><p><img src="https://s1.vika.cn/space/2023/03/14/4f35ba6922d94aa39ca997ad6f3c5997" alt="image-20230314171222545"></p><h1 id="图像的基本运算"><a href="#图像的基本运算" class="headerlink" title="图像的基本运算"></a>图像的基本运算</h1><p>图像处理是建立在各种算法基础上的处理方法，图像基本运算主要包括点运算、代数运算（加、减、乘、除）、逻辑运算（与、或、非）和几何运算（平移、镜像、旋转、缩放）。这些基本运算都具有十分重要的意义，如：改变输入图像的灰度级、降低图像的噪声、进行各种各样的几何变换。</p><h2 id="点运算"><a href="#点运算" class="headerlink" title="点运算"></a>点运算</h2><p>点运算是对图像的每个像素点的灰度值按一定的映射关系运算，得到一福新图片的过程。由于点运算能够有规律的改变像素点的灰度值，故也被称为对比度增强或灰度变换。</p><h3 id="线性点运算"><a href="#线性点运算" class="headerlink" title="线性点运算"></a>线性点运算</h3><p>线性点运算是指输入图像的灰度级与输出图像呈线性关系。</p><p><img src="https://s1.vika.cn/space/2023/03/14/408e662853944ca8943a7d9a1d9815da" alt="image-20230314171922700"></p><p>r为输入灰度值，s为相应点的输出灰度值</p><ul><li>当a&#x3D;1，b&#x3D;0时，新图像与原图像相同；</li><li>当a&#x3D;1，b≠0时，新图像是原图像所有像素的灰度值上移或下移，是整个图像在显示时更亮或更暗；</li><li>当a＞1时，新图像对比度增加；</li><li>当a＜1时，新图像对比度降低；</li><li>当a＜0时，暗区域将变亮，亮区域将变暗，点运算完成了图像求</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">I=im2double(I);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=<span class="number">50</span>;</span><br><span class="line">O=a.*I+b/<span class="number">255</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">imshow(O);title(<span class="string">&#x27;a=1,b=50，图像变亮&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">a=<span class="number">2</span>;b=<span class="number">0</span>;</span><br><span class="line">O=a.*I+b/<span class="number">255</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);imshow(O);</span><br><span class="line">title(<span class="string">&#x27;a=2,b=0,对比度增大&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">a=<span class="number">0.5</span>;b=<span class="number">0</span>;</span><br><span class="line">O=a.*I+b/<span class="number">255</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);imshow(O);</span><br><span class="line">title(<span class="string">&#x27;a=0.5,b=0,对比度降低&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">a= <span class="number">-1</span>;b=<span class="number">255</span>;</span><br><span class="line">O=a.*I+b/<span class="number">255</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);imshow(O);</span><br><span class="line">title(<span class="string">&#x27;a=-1,b=255,图像反色&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/2c76a2f516f8482588cf2c64d3132f41" alt="image-20230314174220654"></p><p>注：代码中O&#x3D;a.*I+b&#x2F;255 ，b除以255原因是： 灰度数据有两种表式方法：一种是用unit8类型，取值0<del>255；另一种是double类型，取值0</del>1。两者之间相差255倍。 就这段代码而言，I刚读入时是unit8类型，在第2句转换为double，所以后面涉及到与它进行运算的时候，为了统一，都要转换到0~1的范围，所以要除255。</p><h3 id="非线性点运算"><a href="#非线性点运算" class="headerlink" title="非线性点运算"></a>非线性点运算</h3><p>非线性点运算是指输入与输出为非线性关系，常见的非线性灰度变换为对数变换和幂次变换，对数变换一般形式为：</p><p><img src="https://s1.vika.cn/space/2023/03/14/e593d341f9a64c5786b9f9aaad22a9d8" alt="image-20230314174345061"></p><p><strong>其中c为一常数，并假设r≥0.此变换使窄带低灰度输入图像映射为宽带输出值，相对的是输出灰度的 高调整。</strong></p><p>代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I=im2double(I);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">c=<span class="number">2</span>;</span><br><span class="line">O=c*<span class="built_in">log</span>(<span class="number">1</span>+I);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(O);</span><br><span class="line">title(<span class="string">&#x27;c&gt;0&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/dfa1f9b9e84d4c07a402f4b25fee9096" alt="image-20230314174553582"></p><p>幂次变换一般形式：s&#x3D;cr^γ</p><p>幂级数γ部分值把窄带暗值映射到宽带输出值</p><p>当γ&lt;1，此时扩展低灰度级，压缩高灰度级，在正比函数上方，使图像变亮；</p><p>当γ&gt;1，此时扩展高灰度级，压缩低灰度级，在正比函数下方，使图像变暗。</p><p><img src="https://s1.vika.cn/space/2023/03/14/18fc0eedd4b9444b9432a0d7d8d7bda5" alt="img"></p><p>程序：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>,<span class="string">&#x27;fontsize&#x27;</span>,<span class="number">9</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">imshow(imadjust(I,[],[],<span class="number">0.1</span>));</span><br><span class="line">title(<span class="string">&#x27;Gamma=0.1&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">imshow(imadjust(I,[],[],<span class="number">1</span>));</span><br><span class="line">title(<span class="string">&#x27;Gamma=1&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">imshow(imadjust(I,[],[],<span class="number">10</span>));</span><br><span class="line">title(<span class="string">&#x27;Gamma=10&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/225e6bda4aa6437ba8b80018eeb02a53" alt="image-20230314175224137"></p><h2 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h2><p>代数运算是指对两幅或两幅以上的图像进行点对点的加、减、乘、除运算而得到目标图像的运算。</p><h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><p>对M幅图片进行求平均，使图像每一点的信噪比提高了M倍。加法运算可以用来降低图片的噪声。</p><p>图片的信噪比增加了M倍再取平均，对原图片来说没有影响，只会降低噪声。</p><p>T(x,y) &#x3D; f(x,y) + g(x,y)</p><p>f:原图，g:噪声</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">J=imnoise(I,<span class="string">&#x27;gaussian&#x27;</span>,<span class="number">0.02</span>);</span><br><span class="line">subplot(<span class="number">131</span>);imshow(I);title(<span class="string">&#x27;原图&#x27;</span>)</span><br><span class="line">subplot(<span class="number">132</span>);imshow(J);title(<span class="string">&#x27;加噪&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">100</span></span><br><span class="line">    J=imnoise(I,<span class="string">&#x27;gaussian&#x27;</span>,<span class="number">0.02</span>);</span><br><span class="line">    J1=im2double(J);</span><br><span class="line">    J2=J1;</span><br><span class="line">J2=J2+J1;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">J2=J2/<span class="number">101</span>;</span><br><span class="line">subplot(<span class="number">133</span>);imshow(J2);title(<span class="string">&#x27;去噪&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/0dc30e3c53de40c096b9d3c01beeceab" alt="image-20230314180830308"></p><h3 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h3><p>减法运算又称为图像差分运算，主要用于提取噪声，在短时间内认为背景是固定的，可用差分法检测变换的或运动的物体。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">J=imnoise(I,<span class="string">&#x27;gaussian&#x27;</span>,<span class="number">0</span>,<span class="number">0.02</span>);<span class="comment">%给图像加高斯噪声</span></span><br><span class="line">K=imsubtract(I,J);<span class="comment">%原始图片与添加噪声的图片相减从而提取出噪声</span></span><br><span class="line">K1=<span class="number">255</span>-K;</span><br><span class="line"><span class="built_in">figure</span>;imshow(I);title(<span class="string">&#x27;原始图像&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>;imshow(J);title(<span class="string">&#x27;有噪声图像&#x27;</span>);</span><br><span class="line"><span class="built_in">figure</span>;imshow(K1);title(<span class="string">&#x27;提取噪声&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在进行有噪声运算时，一般会需要一些运算的时间。</p><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/843fc736a9214d45ab4d5868e00fb2db" alt="image-20230314181607364"></p><p>注：加噪声</p><p>加高斯噪声：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、J = imnoise(I,&#x27;gaussian&#x27;,0,10);</span><br><span class="line"></span><br><span class="line">2、使用randn加高斯噪声：</span><br><span class="line">I=imread(&#x27;E:\my photo and video\2.jpg&#x27;);</span><br><span class="line">J=rgb2gray(I);</span><br><span class="line">y=randn(size(J)); </span><br><span class="line">y=y/std(y); </span><br><span class="line">y=y-mean(y); </span><br><span class="line">a=0; </span><br><span class="line">b=sqrt(5); </span><br><span class="line">y=a+b*y; </span><br><span class="line">y=uint8(I);</span><br><span class="line">y=y+I;</span><br><span class="line">figure;imshow(I);</span><br><span class="line">figure;imshow(y);</span><br><span class="line">3、加椒盐噪声：J= imnoise(I,&#x27;salt &amp; pepper&#x27;,0.1); </span><br></pre></td></tr></table></figure><h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><p>简单的乘法运算可以用来改变灰度级，实现灰度级变换，也可以用来遮住图像的某些部分。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">J=immultiply(I,<span class="number">1.2</span>);</span><br><span class="line">K=immultiply(I,<span class="number">2</span>);</span><br><span class="line">subplot(<span class="number">131</span>);imshow(I);title(<span class="string">&#x27;原始图像&#x27;</span>);</span><br><span class="line">subplot(<span class="number">132</span>);imshow(J);title(<span class="string">&#x27;x1.2&#x27;</span>);</span><br><span class="line">subplot(<span class="number">133</span>);imshow(K);title(<span class="string">&#x27;x2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/ab9a07f99b0f476d81321f796e2242ab" alt="image-20230314181847885"></p><h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><p>简单的除法运算可用于改变图像灰度级，典型运用是比值图像处理。可用于校正成像设备的非线性影响，在特殊形态图像（如CT为代表的医学图像）中用到。</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>常见的逻辑运算有与、或、非，其主要针对二值图像。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A=<span class="built_in">zeros</span>(<span class="number">128</span>);</span><br><span class="line">A(<span class="number">40</span>:<span class="number">67</span>,<span class="number">60</span>:<span class="number">100</span>)=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);imshow(A);title(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">B=<span class="built_in">zeros</span>(<span class="number">128</span>);B(<span class="number">50</span>:<span class="number">80</span>,<span class="number">40</span>:<span class="number">70</span>)=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);imshow(B);title(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">C=and(A,B);<span class="built_in">figure</span>(<span class="number">3</span>);imshow(C);title(<span class="string">&#x27;A and B&#x27;</span>);</span><br><span class="line">D=or(A,B);<span class="built_in">figure</span>(<span class="number">4</span>);imshow(D);title(<span class="string">&#x27;A or B&#x27;</span>);</span><br><span class="line">E=not(A,B);fgure(<span class="number">5</span>);imshow(E);title(<span class="string">&#x27;A not B&#x27;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/dbdc9ff44d924860a3bfd3f10b516690" alt="image-20230314182414904"></p><h2 id="几何运算"><a href="#几何运算" class="headerlink" title="几何运算"></a>几何运算</h2><p>从变换的性质来分，几何变换可以分为图像的位置变换（平移、镜像、旋转）、形状变换（放大、缩小）及图像的复合变换等。一个几何运算需要两个独立的算法，首先需要一个算法定义空间变换，用它描述每个像素如何从其初始位置移动到终止位置，即每个像素的运动。同时还需要一个算法用于灰度级的差值。</p><h3 id="图像平移"><a href="#图像平移" class="headerlink" title="图像平移"></a>图像平移</h3><p>MATLAB自带函数translate(SE,[y x])</p><p>功能：<br>在结构元素SE上进行y和x方向的位移 正数对应右移和下移</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">se=translate(strel(<span class="number">1</span>),[<span class="number">50</span> <span class="number">50</span>]);   </span><br><span class="line"><span class="comment">%向右向下平移50,50像素坐标</span></span><br><span class="line">B=imdilate(A,se);<span class="comment">%形态学膨胀</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),subimage(A);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>),subimage(B);</span><br><span class="line">title(<span class="string">&#x27;图像平移&#x27;</span>)</span><br></pre></td></tr></table></figure><p>另一种写法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">subplot(<span class="number">121</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">[M,N]=<span class="built_in">size</span>(I);</span><br><span class="line">g=<span class="built_in">zeros</span>(M,N);</span><br><span class="line">a=<span class="number">20</span>;b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">i</span>-a&gt;<span class="number">0</span>)&amp;(<span class="built_in">i</span>-a&lt;M)&amp;(<span class="built_in">j</span>-b&gt;<span class="number">0</span>)&amp;(<span class="built_in">j</span>-b&lt;N))</span><br><span class="line">            g(<span class="built_in">i</span>,<span class="built_in">j</span>)=I(<span class="built_in">i</span>-a,<span class="built_in">j</span>-b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            g(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">122</span>);imshow(uint8(g));title(<span class="string">&#x27;平移后的图像&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这种更偏向理论写法，M,N分别是图像长和宽</p><p>用for循环让原图中每个像素向右下角走20像素</p><p>运行结果(第一种)：</p><p><img src="https://s1.vika.cn/space/2023/03/14/cbb08ec9cd4c478e8f9cf714a9274cef" alt="image-20230314182939545"></p><h3 id="图像旋转："><a href="#图像旋转：" class="headerlink" title="图像旋转："></a>图像旋转：</h3><p>使用MATLAB自带函数 imrotate(img,30);<br>功能：<br>将图像img逆时针旋转30°</p><p>MATLAB在进行图像操作时，是将其存放在数组中，而数组坐标必须为整数，若对图像进行旋转、缩放等操作，计算得到的坐标不一定为整数，这时候就需要进行插值。MATLAB常用插值方法有三种：</p><ol><li>最近邻插值 ‘nearest’</li><li>双线性插值 ‘bilinear’</li><li>三次卷积插值 ‘bicubic’</li></ol><p>还可以：</p><p>imrotation用法：<br>imrotation（A，angle,’ method’，’BBox’）<br>1、angle是旋转的角度，在matlab默认的是逆时针旋转的。<br>2、method 就是实现旋转用的方法。有三种：最邻近插值法 、双线性插值法、 三次卷积插值法，英语表示就是  ‘nearest’    ‘bilinear’    ‘bicubic’<br>3、bbox主要分为2种，一个是‘loose’ 另外一个是‘crop’<br>   loose  就是宽松的意思 顾名思义就是说 图像旋转后 系统会给予一个宽松的环境去匹配它，这样得到的图片就是一个完整的图片<br>   crop 就是剪切，为什么旋转后图像变小了，因为matlab默认的是crop  超过图片原来大小的部分被crop了</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">B=imrotate(A,<span class="number">30</span>);                 <span class="comment">%旋转30°</span></span><br><span class="line">C=imrotate(A,<span class="number">30</span>,<span class="string">&#x27;crop&#x27;</span>);       <span class="comment">%旋转30°，并剪切图像，使得到的图像和原图像大小一致</span></span><br><span class="line"><span class="comment">%若不说明插值方法，默认为最近邻插值</span></span><br><span class="line">D=imrotate(A,<span class="number">30</span>,<span class="string">&#x27;bilinear&#x27;</span>,<span class="string">&#x27;crop&#x27;</span>);</span><br><span class="line"><span class="comment">%双线性插值法旋转30°，并剪切图像，使得到的图像和原图像大小一致</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),imshow(A);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),imshow(B);</span><br><span class="line">title(<span class="string">&#x27;图像旋转（保留全部图像信息）&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>),imshow(C);</span><br><span class="line">title(<span class="string">&#x27;图像旋转（大小不变）&#x27;</span>)</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>),imshow(D);</span><br><span class="line">title(<span class="string">&#x27;图像旋转（双线性插值）&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/95bb08443b6c4b95b7ef472f3054ce3f" alt="image-20230314183432258"></p><h3 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h3><p>imresize()</p><h3 id="图像镜像"><a href="#图像镜像" class="headerlink" title="图像镜像"></a>图像镜像</h3><p>图像的镜像是指原始图像相对于某一参考面旋转180°的图像。</p><h4 id="水平镜像"><a href="#水平镜像" class="headerlink" title="水平镜像"></a>水平镜像</h4><p>以图像垂直中轴线为中心，将图像分为左右两部分镜像对称变换</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">I = rgb2gray(I);</span><br><span class="line">subplot(<span class="number">121</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原始图像&#x27;</span>);</span><br><span class="line">[M,N]=<span class="built_in">size</span>(I);</span><br><span class="line">g=<span class="built_in">zeros</span>(M,N);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">        g(<span class="built_in">i</span>,<span class="built_in">j</span>)=I(<span class="built_in">i</span>,N-<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">122</span>);imshow(uint8(g));title(<span class="string">&#x27;水平镜像&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/06ff87b8be8a426d9e743ac8d305d306" alt="image-20230314185651240"></p><h4 id="垂直镜像"><a href="#垂直镜像" class="headerlink" title="垂直镜像"></a>垂直镜像</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">I=imread(<span class="string">&#x27;1.jpg&#x27;</span>);</span><br><span class="line">I = rgb2gray(I);</span><br><span class="line">subplot(<span class="number">121</span>);</span><br><span class="line">imshow(I);</span><br><span class="line">title(<span class="string">&#x27;原图像&#x27;</span>);</span><br><span class="line">[M,N]=<span class="built_in">size</span>(I);</span><br><span class="line">g=<span class="built_in">zeros</span>(M,N);</span><br><span class="line">a=<span class="number">20</span>;b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:M</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">        <span class="keyword">if</span>((M-<span class="built_in">i</span>&gt;<span class="number">0</span>)&amp;(N-<span class="built_in">j</span>&gt;<span class="number">0</span>))</span><br><span class="line">            g(<span class="built_in">i</span>,<span class="built_in">j</span>)=I(M-<span class="built_in">i</span>,N-<span class="built_in">j</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            g(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">122</span>);imshow(uint8(g));title(<span class="string">&#x27;垂直镜像图像&#x27;</span>)</span><br></pre></td></tr></table></figure><p>原理几乎都相同，对图片的每个像素进行操作</p><p>垂直镜像 x,y轴都变化</p><p>运行效果：</p><p><img src="https://s1.vika.cn/space/2023/03/14/bb5c430e2a574c85b10fce8990da7c49" alt="image-20230314190032737"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript(一篇解决)</title>
      <link href="/2023/03/13/Javascript(%E4%B8%80%E7%AF%87%E8%A7%A3%E5%86%B3)/"/>
      <url>/2023/03/13/Javascript(%E4%B8%80%E7%AF%87%E8%A7%A3%E5%86%B3)/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h3><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><p><img src="https://s1.vika.cn/space/2023/03/15/15f627839b8a4e748ad31d3952f0a2ac" alt="image-20230315181721977"></p><p>prompt相当于python的input,返回输入的内容（也是字符串）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="title function_">prompt</span>(<span class="string">&#x27;请输入信息&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量声明没有数据类型限制，只要是变量就用var，可以不同类型之间赋值（JS是动态语言 变量的数据类型是可以变化的）,多个变量用逗号隔开</p><p>与其他语言基本相同，变量的属性基本相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>,</span><br><span class="line">    name = <span class="string">&#x27;Tiany&#x27;</span>,</span><br><span class="line">    height = <span class="number">182</span>;</span><br></pre></td></tr></table></figure><p>对于没有赋值或者没有声明的变量，没法使用。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>一些JS的数据类型：</p><p><img src="https://s1.vika.cn/space/2023/03/15/607be82d37404cca978a4daf27cb12f2" alt="image-20230315184245654"></p><p><strong>数字型</strong> <strong>Number</strong></p><p>可以赋值二、八、十、十六进制数</p><p>只需要记住，在JS中八进制前面加0，十六进制前面加 0x </p><p><strong>JavaScript中数值的最大和最小值</strong></p><ul><li><p>最大值：Number.MAX_VALUE，这个值为： </p><p>1.7976931348623157e+308</p></li><li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure><p><strong>数字型三个特殊值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Infinity</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="title function_">alert</span>(-<span class="title class_">Infinity</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示方式</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>*<span class="number">2</span>);<span class="comment">//无穷大</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>*<span class="number">2</span>);<span class="comment">//无穷小</span></span><br></pre></td></tr></table></figure><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul><p>isNaN()函数判断是否为数字 返回true false</p><p><strong>字符串</strong></p><p>String 单双引号都行</p><p>字符串长度：检测获取用length函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">&quot;我是帅气多金的程序猿！&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(strMsg.<span class="property">length</span>); <span class="comment">// 显示 11</span></span><br></pre></td></tr></table></figure><p>字符串拼接与python相同</p><p><strong>获取变量数据类型</strong></p><p>typeof 变量名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num);</span><br></pre></td></tr></table></figure><p>转化为字符串型：</p><p><img src="https://s1.vika.cn/space/2023/03/15/a86004b7289e4b258f56c68b4ea9b493" alt="image-20230315190342129"></p><p>转化为数字型</p><p>可以去单位（例如px）</p><p><img src="https://s1.vika.cn/space/2023/03/15/c6cd8cc7a2e64e469c802ff574f67c12" alt="image-20230315190434145"></p><p>隐式转换可以将字符串自动转成数字型</p><p>转化为布尔型：</p><p>只有一个函数：Boolean()</p><ul><li>代表空、否定的值会被转换为false,如””、0、NaN、null、undefined</li><li>其余值都会转换为true</li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>这里简单说几个</p><p>比较运算符：JavaScript多个’&#x3D;&#x3D;&#x3D;’和’!&#x3D;&#x3D;’ 代表是否全等 要求值和 数据类型都一致</p><p>逻辑运算符：这几个 和C一样</p><p><img src="https://s1.vika.cn/space/2023/03/15/d8937c1e52c64bd8a31f63025c75c39a" alt="image-20230315191653425"></p><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><p><img src="https://s1.vika.cn/space/2023/03/15/fd0e4fcb8f6042e6be2df6c2ba1b5797" alt="image-20230315192125677"></p><p>前边的有假 后边的就不算了</p><p><img src="https://s1.vika.cn/space/2023/03/15/cbbd7f5c1b184b3f8ea25994df882ece" alt="image-20230315192355636"></p><p>前边的有真 后边的就不算了</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>直接、加等、减等、乘 除 取模后赋值</p><h2 id="JavaScript流程控制"><a href="#JavaScript流程控制" class="headerlink" title="JavaScript流程控制"></a>JavaScript流程控制</h2><p>就是不同结构，顺序、分支、循环</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>分支：if语句格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双分支</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"><span class="comment">//执行语句1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//执行语句2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多分支</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line"><span class="comment">//执行语句1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">    <span class="comment">//执行语句2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//执行语句3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三目运算</strong>：表达式1 ? 表达式2 : 表达式3;</p><p>switch分支流程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>( 表达式 )&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="attr">value1</span>: </span><br><span class="line">        <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="attr">value2</span>: </span><br><span class="line">        <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>: </span><br><span class="line">        <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case是全匹配</p><p><strong>注意： 执行</strong> <strong>case</strong> <strong>里面的语句时，如果没有</strong> <strong>break</strong> **，则继续执行下一个 ** <strong>case</strong> <strong>里面的语句。</strong>(不管匹不匹配)</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>JavaScript和C的语法完全一致，不用再多赘述了</p><p>for while do-while 都有</p><p>continue 和 break 用法也都一样</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>JavaScript的创建方式有：</p><p>1.利用 new 创建</p><p>var arr &#x3D; new Array();</p><p>2.用数组字面量创建 [] (常用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;tiany&#x27;</span>,<span class="literal">true</span>] <span class="comment">//可多种数据类型放一起</span></span><br></pre></td></tr></table></figure><p>遍历数组直接也可以直接循环索引。</p><p>提取数组长度：arr.length</p><p>对以下数组追加元素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;tiany&#x27;</span>]</span><br><span class="line">arr1[<span class="number">4</span>] = <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明与调用"><a href="#函数声明与调用" class="headerlink" title="函数声明与调用"></a>函数声明与调用</h3><ol><li><p>声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 () &#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字就是 function</p><p>第二种命名方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">aru</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数表达式&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&#x27;tiany&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也就是代表着 以变量名形式定义 所以”fun”也可作为值 可进行赋值操作。</p></li><li><p>调用就直接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数名();</span></span><br><span class="line"><span class="title class_">SayHello</span>();</span><br></pre></td></tr></table></figure></li></ol><p>含参函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>,形参<span class="number">2</span>,...) &#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="title function_">getResult</span>();</span><br><span class="line"><span class="comment">//num = 666</span></span><br></pre></td></tr></table></figure><p>有返回返回返回值，没返回返回undefined</p><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a><strong>arguments的使用</strong></h3><p>注：函数体内部写</p><p>当我们不确定有多少个参数传递的时候，可以用<strong>arguments</strong>来获取。在JavaScript中，arguments实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个arguments对象，arguments对象中<strong>存储了传递的所有实参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// 里面存储了所有传递过来的参数(实参)</span></span><br><span class="line">    <span class="comment">//输出的是Arguments(3)[.....] 3是元素个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//伪数组 并不是真正意义上的数组</span></span><br><span class="line"><span class="comment">//1. 具有数组的 length 属性</span></span><br><span class="line"><span class="comment">//2. 按照索引的方式进行储存的</span></span><br><span class="line"><span class="comment">//3. 它没有真正数组的一些方法 pop() push() 等</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; argumnets.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line"><span class="comment">//简单来说就是直接对参数进行操作</span></span><br></pre></td></tr></table></figure><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><ol><li>js引擎在运行js时分为两步：预解析、代码执行</li><li>预解析：js引擎会把js里面所有的var还有function提升到当前作用域的最前面</li><li>代码执行：从上往下依次执行</li></ol><p>预解析的变量提升和函数提升分别把变量和函数声明提升到最前面（不提升赋值操作，只有变量，故一般不定义的话会显示undefined 但函数可以随便放）</p><h2 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h2><p>JS的对象和C++、python的一样 属性方法都有</p><h3 id="创建对象方式"><a href="#创建对象方式" class="headerlink" title="创建对象方式"></a>创建对象方式</h3><p>三种方法：</p><ol><li><p>第一种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用对象字面量创建对象&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//创建空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1、 里面的属性或者方法我们采取键值对的形式 属性名：属性值</span></span><br><span class="line"><span class="comment">//2、多个属性或者方法中间用逗号隔开的</span></span><br><span class="line"><span class="comment">//3、方法冒号后面跟的是一个匿名函数</span></span><br><span class="line"><span class="comment">//(1).使用对象 调用对象就也是 对象名.属性名（方法名）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);</span><br><span class="line"><span class="comment">//(2).还有一种 对象名[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line"><span class="comment">//方法：</span></span><br><span class="line">obj.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用 new Object 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等号赋值方式规定属性</span></span><br></pre></td></tr></table></figure></li><li><p>第三种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//使用前边两种方式创建只能一次只创建一个对象</span></span><br><span class="line"><span class="comment">//就是将属性值封装到函数中，每次都可创建具有相同属性的对象 调用方式为：new 构造函数名();</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age,sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">SayHello</span> = <span class="keyword">function</span>(<span class="params">massage</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(massage)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zhang = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="comment">//调用必须要用new 名字();</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>new的执行过程</strong></p><p><img src="https://s1.vika.cn/space/2023/03/16/3af2ec793c964d82b1171ca94bedc171" alt="image-20230316210334014"></p><p>遍历对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和遍历字典类似，javascript的遍历键值对的方式用for in 这里k就是键</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>内置对象就是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能(属性和方法)</p><p>内置对象最大优点就是帮助我们快速开发</p><p>JavaScript提供了多个内置对象:Math、Date、Array、String等</p><p><strong>查阅MDN文档</strong></p><p>直接查MDN网站即可：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><p>使用内置对象时，不需要new来调用，直接使用里面的属性和方法即可</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">//属性 圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>)) <span class="comment">//绝对值 这里也支持隐式转换（字母不行）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)) <span class="comment">//向上取整 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1</span>,<span class="number">1</span>)) <span class="comment">//向下取整 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)) <span class="comment">//四舍五入 2 其他数字都是四舍五入，但是.5特殊 它往大了取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">//方法 最大值</span></span><br><span class="line"><span class="comment">//对于可以没有参数的方法,返回值时-Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()) <span class="comment">// 返回一个随机的小数</span></span><br></pre></td></tr></table></figure><p>随机整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>(max-min+<span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">0</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>格式化年月日</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 年月日 </span></span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 返回当前日期的年  2019</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 月份 返回的月份小1个月   记得月份+1 呦</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 返回的是 几号</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 3  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line">            <span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line">            <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">            <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line">            <span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day]);</span><br></pre></td></tr></table></figure><p>格式化时分秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化日期 时分秒</span></span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 时</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 分</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 秒</span></span><br><span class="line">        <span class="comment">// 要求封装一个函数返回当前的时分秒 格式 08:08:08</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> h = time.<span class="title function_">getHours</span>();</span><br><span class="line">            h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">            <span class="keyword">var</span> m = time.<span class="title function_">getMinutes</span>();</span><br><span class="line">            m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">            <span class="keyword">var</span> s = time.<span class="title function_">getSeconds</span>();</span><br><span class="line">            s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">            <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTimer</span>());</span><br></pre></td></tr></table></figure><p>获取Date总的毫秒数(时间戳)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得Date总的毫秒数(时间戳)  不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span></span><br><span class="line">        <span class="comment">// 1. 通过 valueOf()  getTime()</span></span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">// 就是 我们现在时间 距离1970.1.1 总的毫秒数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line">        <span class="comment">// 2. 简单的写法 (最常用的写法)</span></span><br><span class="line">        <span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// +new Date()  返回的就是总的毫秒数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(date1);</span><br><span class="line">        <span class="comment">// 3. H5 新增的 获得总的毫秒数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><p>倒计时计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒计时效果</span></span><br><span class="line"><span class="comment">// 1.核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。</span></span><br><span class="line"><span class="comment">// 2.用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</span></span><br><span class="line"><span class="comment">// 3.把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</span></span><br><span class="line"><span class="comment">// 转换公式如下： </span></span><br><span class="line"><span class="comment">//  d = parseInt(总秒数/ 60/60 /24);    //  计算天数</span></span><br><span class="line"><span class="comment">//  h = parseInt(总秒数/ 60/60 %24)   //   计算小时</span></span><br><span class="line"><span class="comment">//  m = parseInt(总秒数 /60 %60 );     //   计算分数</span></span><br><span class="line"><span class="comment">//  s = parseInt(总秒数%60);            //   计算当前秒数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><p>数组排序：</p><ol><li><p>翻转数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">        arr.<span class="title function_">reverse</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure></li><li><p>数组排序(冒泡排序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">13</span>, <span class="number">4</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">7</span>];</span><br><span class="line">        arr1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">            <span class="comment">//  return a - b; 升序的顺序排列</span></span><br><span class="line">            <span class="keyword">return</span> b - a; <span class="comment">// 降序的顺序排列</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure></li></ol><p>获取元素索引：</p><ul><li>arr.indexOf(element,index) 从头部开始寻找第一个元素的索引 未找到就返回-1 第二个参数是从第几个元素开始</li><li>arr.lastIndexOf() 从尾部开始寻找第一个符合的元素的索引</li></ul><p>数组转换为字符串：</p><ol><li><p>toString() 将数组直接转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure></li><li><p>join(分隔符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>()); <span class="comment">// green,blue,pink</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// green-blue-pink</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// green&amp;blue&amp;pink</span></span><br></pre></td></tr></table></figure></li></ol><p>字符串不可变，所以不能大量的拼接字符串</p><p>根据位置返回字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据位置返回字符</span></span><br><span class="line">        <span class="comment">// 1. charAt(index) 根据位置返回字符</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// 遍历所有的字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. charCodeAt(index)  返回相应索引号的字符ASCII值 目的： 判断用户按下了那个键 </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)); <span class="comment">// 97</span></span><br><span class="line">        <span class="comment">// 3. str[index] H5 新增的</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">0</span>]); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>字符串操作方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串操作方法</span></span><br><span class="line">        <span class="comment">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27;red&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 第一个2 是索引号的2 从第几个开始  第二个2 是取几个字符</span></span><br></pre></td></tr></table></figure><p>其他几个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;andyandy&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">        <span class="comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (str1.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            str1 = str1.<span class="title function_">replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    前面我们学过 join 把数组转换为字符串</span></span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="string">&#x27;red, pink, blue&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&#x27;red&amp;pink&amp;blue&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>));</span><br></pre></td></tr></table></figure><p>简单数据类型和复杂数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单数据类型 null  返回的是一个空的对象  object </span></span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer);</span><br><span class="line">        <span class="comment">// 如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null </span></span><br><span class="line">        <span class="comment">// 1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值</span></span><br><span class="line">        <span class="comment">// 2. 复杂数据类型 首先在栈里面存放地址 十六进制表示  然后这个地址指向堆里面的数据</span></span><br></pre></td></tr></table></figure><p>复杂数据类型传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复杂数据类型传参</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?  刘德华   </span></span><br><span class="line">            x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?   张学友</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 1. 这个输出什么 ?   刘德华 </span></span><br><span class="line">        <span class="title function_">f1</span>(p);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 4. 这个输出什么 ?   张学友</span></span><br></pre></td></tr></table></figure><h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><p>Web APIs是js的应用，大量使用JS基础语法做交互效果</p><p><strong>API是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或者硬件得以访问的一组例程的能力，而又无需访问源码，或理解内部工作的机制</strong></p><p>Web API是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM）</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM就是文档对象模型，是处理（HTML或者XML）一类的标准编程接口</p><p>通过已经定义的一系列DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式</p><h4 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h4><p><img src="https://s1.vika.cn/space/2023/04/09/56b54e8d9ebc4a4f880cabcf5ac82ffa" alt="image-20230409164515980"></p><ul><li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素：页面中的所有标签都是元素，DOM 中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示</li></ul><p>DOM把以上内容都看作是对象</p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>获取页面中的元素可以使用以下几种方式：</p><ul><li>根据 ID 获取 </li><li>根据标签名获取 </li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><p>ID：</p><p>使用getElementById()方法可以获取带有ID的元素对象(单个)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>); <span class="comment">//参数是大小写敏感的字符串</span></span><br></pre></td></tr></table></figure><p>返回的是找到的element对象，没找到就返回null</p><p>记得查询元素的时候它是放在标签下边的</p><p>使用console.dir()可以打印获取的元素对象，可以查看对象里面的属性和方法</p><p>根据标签名获取：</p><p>使用 getElementsByTagName() 方法可以返回带有指定标签名的对象的集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>); </span><br><span class="line">element.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>); <span class="comment">//还可以获取某个元素(父元素)内部所有指定标签的子元素，父元素必须是指定的单个元素</span></span><br></pre></td></tr></table></figure><p>不管页面中有几个，返回的都是伪数组形式</p><p>注：因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。 得到元素对象是动态的</p><p>根据HTML5新增的方法获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(‘类名’)；<span class="comment">// 根据类名返回元素对象集</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>); <span class="comment">// 根据指定选择器返回所有对象的集合</span></span><br></pre></td></tr></table></figure><p>注意：querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector(‘#nav’);</p><p>获取特殊元素(body,html)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span> <span class="comment">//返回body元素对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span> <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure><h4 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h4><p>1、事件概述</p><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。 </p><p>简单理解： 触发— 响应机制。 </p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p><p>2、事件的三要素</p><ol><li>事件源 （谁）</li><li>事件类型 （什么事件）</li><li>事件处理程序 （做啥）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="title function_">alert</span>(<span class="string">&#x27;你好吗&#x27;</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、执行事件的步骤</p><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（采取函数赋值形式）</li></ol><p>常见的鼠标事件：</p><p><img src="https://s1.vika.cn/space/2023/04/09/382e399bd93c47cba554c5b9d2f7b2ea" alt="image-20230409171716784"></p><h4 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h4><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内 容 、属性等。注意以下都是属性</p><p>1、改变元素内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerText</span> <span class="comment">//从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</span></span><br><span class="line">element.<span class="property">innerHTML</span> <span class="comment">//起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</span></span><br></pre></td></tr></table></figure><p>2、常用元素的属性操作</p><ol><li>innerText、innerHTML 改变元素内容</li><li>src、href</li><li>id、alt、title</li></ol><p>3、表单元素的属性操作</p><p>利用 DOM 可以操作如下表单元素的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type、value、checked、selected、disabled</span><br></pre></td></tr></table></figure><p>4、样式属性操作</p><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> element.<span class="property">style</span> 行内样式操作</span><br><span class="line"><span class="number">2.</span> element.<span class="property">className</span> 类名样式操作</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>JS 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor </li><li>JS 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><p><strong>操作元素总结</strong></p><p>操作元素是 DOM 核心内容</p><p><img src="https://s1.vika.cn/space/2023/04/09/5da341d3883c4902b07d17a842f65531" alt="image-20230409203955462"></p><p>更改页面背景案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/1.jpg</span>) no-repeat center top;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">410px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-top</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.baidu</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.baidu&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(imgs);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 循环注册事件 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            imgs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.src 就是我们点击图片的路径   images/2.jpg</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.src);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 把这个路径 this.src 给body 就可以了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">src</span> + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="自定义属性的操作"><a href="#自定义属性的操作" class="headerlink" title="自定义属性的操作"></a>自定义属性的操作</h5><p>1、获取属性值</p><ul><li>element.属性 获取属性值。</li><li>element.getAttribute(‘属性’);</li></ul><p>区别</p><ul><li>element.属性 获取内置属性值（元素本身自带的属性）</li><li>element.getAttribute(‘属性’); 主要获得自定义的属性 （标准） 我们程序员自定义的属性</li></ul><p>2、设置属性值</p><ul><li>element.属性 &#x3D; ‘值’ 设置内置属性值。</li><li>element.setAttribute(‘属性’, ‘值’);</li></ul><p>区别</p><ul><li>element.属性 设置内置属性值</li><li>element.setAttribute(‘属性’); 主要设置自定义的属性 （标准）</li></ul><p>3、移除属性</p><ul><li>element.removeAttribute(‘属性’);</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPIO输出与GPIO输入</title>
      <link href="/2023/03/08/GPIO%E8%BE%93%E5%87%BA%E4%B8%8EGPIO%E8%BE%93%E5%85%A5/"/>
      <url>/2023/03/08/GPIO%E8%BE%93%E5%87%BA%E4%B8%8EGPIO%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="GPIO输出"><a href="#GPIO输出" class="headerlink" title="GPIO输出"></a>GPIO输出</h1><p>GPIO简介</p><ul><li>GPIO：通用输入输出</li><li>引脚电平：0V~3.3V，部分引脚可容忍5V</li><li>输出模式下可控制端口输出高低点评，用以驱动LED、控制蜂鸣器、模拟通信协议输出时序等</li><li>输入模式下可读取端口的高低点评或电压，用于读取按键输入、外接模块电平信号输入、ADC电压采集、模拟通信协议接收数据等。</li></ul><p><img src="https://s1.vika.cn/space/2023/03/11/2088a80ae70a42d5983428bfd37d90f2" alt="image-20230311103301363"></p><ol><li><h4 id="保护二极管"><a href="#保护二极管" class="headerlink" title="保护二极管"></a>保护二极管</h4><p>引脚内部加上这两个保护二级管可以防止引脚外部过高或过低的电压输入，当引脚电压高于VDD_FT或VDD时，上方的二极管导通吸收这个高电压，当引脚电压低于VSS时，下方的二极管导通，防止不正常电压引入芯片导致芯片烧毁。</p><p>尽管STM32芯片内部有这样的保护，但并不意味着STM32的引脚就无所不能，如果直接将引脚连接大功率器件，比如电机，那么要么电机不转，要么烧坏芯片。如果要驱动一些大功率器件，必须要加大功率及隔离电路驱动。也可以说STM32引脚是用来做控制，而不是做驱动使用的。</p></li><li><h4 id="上下拉电阻"><a href="#上下拉电阻" class="headerlink" title="上下拉电阻"></a>上下拉电阻</h4><p>从图中可以看到，上拉和下拉电阻上都有一个开关，通过配置上下拉电阻开关，可以控制引脚的默认状态电平。当开启上拉时引脚默认电压为高电平，开启下拉时，引脚默认电压为低电平，这样就可以消除引脚不定状态的影响。当然也可以将上拉和下拉的开关都关断，这种状态我们称为浮空模式，一旦配置成这个模式，引脚的电压是不确定的，如果用万用表测量此模式下管脚电压时会发现只有 1 点几伏，而且还不时改变，所以一般情况下我们都会给引脚设置成上拉或者下拉模式，使它有一个默认状态。STM32 上下拉及浮空模式的配置是通过GPIOx_CRL和GPIOx_CRH寄存器控制的，大家在《STM32F1xx中文参考手册》查阅。STM32内部的上拉其实是一个弱上拉，也就是说通过此上拉电阻输出的电流很小，如果想要输出一个大电流，那么就需要外接上拉电阻了。</p></li><li><h4 id="P-MOS和N-MOS管"><a href="#P-MOS和N-MOS管" class="headerlink" title="P-MOS和N-MOS管"></a>P-MOS和N-MOS管</h4><p>GPIO引脚经过两个保护二极管后就分成两路，上面一路是“输入模式”，下面一路是“输出模式”。我们先讲输出模式，线路经过一个由P-MOS和N-MOS管组成的单元电路，这让GPIO引脚具有了推挽和开漏两种输出模式。所谓推挽输出模式，是根据P-MOS和N-MOS管的工作方式命名的。在该结构单元输入一个高电平时，P-MOS管导通，N-MOS管截止（可以将P-MOS当作NPN三极管，N-MOS当作PNP三极管来看就非常清楚），对外输出高电平（3.3V）。</p><p>在该单元输入一个低电平时，P-MOS管截止，N-MOS管导通， 对外输出低电平 （0V） 。如果当切换输入高低电平时，两个MOS管将轮流导通，一个负责灌电流（电流输出到负载），一个负责拉电流（负载电流流向芯片），使其负载能力和开关速度都比普通的方式有很大的提高。下图为推挽输出模式的等效电路。简单记就可以理解为推挽模式下，输出高低电平都由他说了算。</p><p><img src="https://s1.vika.cn/space/2023/03/11/dce392034e1b4c85bcd05aef4cfd98e3" alt="image-20230311134553598"></p><p>在开漏输出模式时，不论输入是高电平还是低电平，P-MOS 管总处于关闭状态。当给这个单元电路输入低电平时，N-MOS 管导通，输出即为低电平。当输入高电平时，N-MOS 管截止，这个时候引脚状态既不是高电平，又不是低电平，我们称之为高阻态。如果想让引脚输出高电平，那么引脚必须外接一个上拉电阻，由上拉电阻提供高电平。开漏输出模式等效电路图如下图所示。</p><p><img src="https://s1.vika.cn/space/2023/03/11/6fe1d979e07249acbafe02aafa8419f4" alt="image-20230311134608553"></p><p>在开漏输出模式中还有一个特点，引脚具有“线与”关系。就是说如果有很多个开漏输出模式的引脚接在一起，只要有一个引脚为低电平，其他所有管脚都为低，即把所有引脚连接在一起的这条总线拉低了。只有当所有引脚输出高阻态时这条总线的电平才由上拉电阻的 VDD 决定。如果 VDD 连接的是 3.3V，那么引脚输出的就是 3.3V，如果 VDD 连接的是 5V，那么引脚输出的就是 5V。因此如果想要让 STM32 管脚输出 5V，可以选择开漏输出模式，然后在外接上拉电阻的电源 VDD 选择 5V 即可，前提是这个 STM32 引脚是容忍 5V 的。开漏输出模式一般应用在 I2C、SMBUS 通讯等需要“线与”功能的总线电路中。还可以用在电平不匹配的场合中，就如上面说的输出 5V 一样。</p><p>推挽输出模式一般应用在输出电平为0-3.3V而且需要高速切换开关状态的场合。除了必须要用开漏输出模式的场合，我们一般选择推挽输出模式。要配置引脚是开漏输出还是推挽输出模式可以使用GPIOx_CRL和GPIOx_CRH寄存器， 寄存器详细内容可以参考《STM32F1xx 中文参考手册》“通用和复用I&#x2F;O（GPIO和AFIO）”章节。</p></li><li><h4 id="输出数据寄存器"><a href="#输出数据寄存器" class="headerlink" title="输出数据寄存器"></a>输出数据寄存器</h4><p>前面提到的双 MOS 管结构电路的输入信号，是由 GPIO“输出数据寄存器GPIOx_ODR”提供的， 因此我们通过修改输出数据寄存器的值就可以修改GPIO引脚的输出电平。而“置位&#x2F;复位寄存器 GPIOx_BSRR”可以通过修改输出数据寄存器的值从而影响电路的输出。</p></li></ol><h2 id="GPIO的8种模式"><a href="#GPIO的8种模式" class="headerlink" title="GPIO的8种模式"></a>GPIO的8种模式</h2><p>通过配置GPIO的端口配置寄存器，端口可以配置成8种模式</p><p><img src="https://s1.vika.cn/space/2023/03/11/1a3299f00f7547c19d3ba0f7bb18b18a" alt="image-20230311141153917"></p><ol><li><h4 id="浮空-x2F-上拉-x2F-下拉-x2F-输入模式"><a href="#浮空-x2F-上拉-x2F-下拉-x2F-输入模式" class="headerlink" title="浮空&#x2F;上拉&#x2F;下拉&#x2F;输入模式"></a>浮空&#x2F;上拉&#x2F;下拉&#x2F;输入模式</h4><p><img src="https://s1.vika.cn/space/2023/03/12/75aa226f23014f34a4bd363094780987" alt="image-20230312195413518"></p><p>上拉：引脚内部有一个上拉电阻，通过开关连接到电源VDD，当I&#x2F;O引脚无输入信号时，默认为高电平；其典型应用就是接外部按键，当没有按下时，默认为高电平，按下则为低电平。</p><p>下拉：与上拉输入模式正好相反。</p><p>浮空：内部即不接上拉也不下拉，直接经施密特触发器或不处理进入片上外设。</p></li><li><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4><p><img src="https://s1.vika.cn/space/2023/03/12/c0c77235ee264b028dcb91f0298d864b" alt="image-20230312195922683"></p><p>该模式下，只有一个施密特触发器是中间处理，但出于关闭状态，信号直接连接到片上外设，典型应用是A&#x2F;D模式输入，实现对外部信号采集，类似采集电信号的频率周期等。</p></li><li><h4 id="开漏-x2F-推输出模式"><a href="#开漏-x2F-推输出模式" class="headerlink" title="开漏&#x2F;推输出模式"></a>开漏&#x2F;推输出模式</h4><p><img src="https://s1.vika.cn/space/2023/03/12/e46d21a6380d4935870f2c12dec99d47"></p><p>解析见上边P-MOS与N-MOS介绍</p></li><li><h4 id="复用开漏-x2F-推输出模式"><a href="#复用开漏-x2F-推输出模式" class="headerlink" title="复用开漏&#x2F;推输出模式"></a>复用开漏&#x2F;推输出模式</h4><p><img src="https://s1.vika.cn/space/2023/03/12/719c6574fbac4e33bb5fb018810da349" alt="image-20230312201210367"></p><p>复用功能输出模式接片上外设，当I&#x2F;O引脚用作复用功能时，可选择复用推挽输出或复用开漏输出，选择复用开漏输出时，需外接上拉电阻。</p></li></ol><h3 id="模式选择与端口初始化"><a href="#模式选择与端口初始化" class="headerlink" title="模式选择与端口初始化"></a>模式选择与端口初始化</h3><p>在进行输出操作之前，需要对GPIO引脚进行初始化</p><p>需先实例化GPIO初始化对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);<span class="comment">//使能GPIOA时钟</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;<span class="comment">//LED0和LED1对应IO口 可以或运算是因为配置选择寄存器时是按位选择哪一个引脚的 也可以GPIO_Pin_All;</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;<span class="comment">//普通输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;<span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;<span class="comment">//100MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;<span class="comment">//上拉</span></span><br><span class="line">GPIO_Init(GPIOF, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br></pre></td></tr></table></figure><p>在进行按位置位或者清空时，可以用</p><p>GPIO_SetBits(GPIOA,GPIO_Pin_9 | GPIO_Pin_10);</p><p>GPIO_ResetBits(GPIOA,GPIO_Pin_9 | GPIO_Pin_10);</p><p>下面是通过 标准库函数、位带、直接操作寄存器方式实现流水灯：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"> </span><br><span class="line">delay_init(<span class="number">168</span>);  <span class="comment">//初始化延时函数</span></span><br><span class="line">LED_Init();        <span class="comment">//初始化LED端口</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**下面是通过直接操作库函数的方式实现IO控制**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_9);  <span class="comment">//LED0对应引脚GPIOF.9拉低，亮  等同LED0=0;</span></span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_10);   <span class="comment">//LED1对应引脚GPIOF.10拉高，灭 等同LED1=1;</span></span><br><span class="line">delay_ms(<span class="number">500</span>);     <span class="comment">//延时300ms</span></span><br><span class="line">GPIO_SetBits(GPIOF,GPIO_Pin_9);   <span class="comment">//LED0对应引脚GPIOF.0拉高，灭  等同LED0=1;</span></span><br><span class="line">GPIO_ResetBits(GPIOF,GPIO_Pin_10); <span class="comment">//LED1对应引脚GPIOF.10拉低，亮 等同LED1=0;</span></span><br><span class="line">delay_ms(<span class="number">500</span>);                     <span class="comment">//延时300ms</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*******************下面注释掉的代码是通过 位带 操作实现IO口控制**************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main(void)</span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">delay_init(168);  //初始化延时函数</span></span><br><span class="line"><span class="comment">LED_Init();        //初始化LED端口</span></span><br><span class="line"><span class="comment">  while(1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">     LED0=0;  //LED0亮</span></span><br><span class="line"><span class="comment">   LED1=1;//LED1灭</span></span><br><span class="line"><span class="comment"> delay_ms(500);</span></span><br><span class="line"><span class="comment"> LED0=1;//LED0灭</span></span><br><span class="line"><span class="comment"> LED1=0;//LED1亮</span></span><br><span class="line"><span class="comment"> delay_ms(500);</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">**************************************************************************************************</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*******************下面注释掉的代码是通过 直接操作寄存器 方式实现IO口控制**************************************</span></span><br><span class="line"><span class="comment">int main(void)</span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">delay_init(168);  //初始化延时函数</span></span><br><span class="line"><span class="comment">LED_Init();        //初始化LED端口</span></span><br><span class="line"><span class="comment">while(1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">     GPIOF-&gt;BSRRH=GPIO_Pin_9;//LED0亮</span></span><br><span class="line"><span class="comment">   GPIOF-&gt;BSRRL=GPIO_Pin_10;//LED1灭</span></span><br><span class="line"><span class="comment"> delay_ms(500);</span></span><br><span class="line"><span class="comment">     GPIOF-&gt;BSRRL=GPIO_Pin_9;//LED0灭</span></span><br><span class="line"><span class="comment">   GPIOF-&gt;BSRRH=GPIO_Pin_10;//LED1亮</span></span><br><span class="line"><span class="comment"> delay_ms(500);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> &#125; </span></span><br><span class="line"><span class="comment">**************************************************************************************************</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式入门</title>
      <link href="/2023/03/05/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/03/05/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h1><h3 id="对于嵌入式软硬件开发的一点看法："><a href="#对于嵌入式软硬件开发的一点看法：" class="headerlink" title="对于嵌入式软硬件开发的一点看法："></a>对于嵌入式软硬件开发的一点看法：</h3><ol><li>硬件开发作为IT人的就业研究方向，也是不少发烧友、DIY爱好者的兴趣所向</li><li>物联网、人工智能、AIOT也是科技社会发展的必定趋势</li><li>学好嵌入式开发即可作为未来的就业选择，也可以作为兴趣爱好发展自身技能</li></ol><h3 id="开发板芯片选择"><a href="#开发板芯片选择" class="headerlink" title="开发板芯片选择"></a>开发板芯片选择</h3><p>目前主流的一些芯片、开发板都可作为我们学习嵌入式的选择</p><ul><li>stm32</li><li>esp32</li><li>esp8266</li><li>51单片机</li></ul><p>以及树莓派、香橙派、Arduino等</p><p>目前我的专业也开设嵌入式开发与传感器(基于stm32)课程，所以准备选择学习stm32F103C8T6芯片</p><h2 id="1STM32微控制器结构"><a href="#1STM32微控制器结构" class="headerlink" title="1STM32微控制器结构"></a>1STM32微控制器结构</h2><h3 id="1-1STM32系统结构"><a href="#1-1STM32系统结构" class="headerlink" title="1.1STM32系统结构"></a>1.1STM32系统结构</h3><p>系统结构图：<img src="https://s1.vika.cn/space/2023/03/05/b10f1f26fdcf46c4b452ad301c0670e5" alt="image-20230305205030300"></p><p>STM32主系统主要由四个驱动单元和四个被动单元</p><p>四个驱动单元：<strong>①内核DCode总线  ②系统总线  ③通用DMA1  ④通用DMA2</strong></p><p>四个被动单元：<strong>①AHB到APB的桥：连接所有的APB设备  ②内部flash闪存  ③内部SRAM  ④FSMC</strong></p><p><strong>端口及外设：</strong></p><p>①Cortex-M3内核：它是STM32F103的内核，也就是CPU。除掉这个部件，其他部件都是片上外设，注意是片上的，也就是那块我们肉眼所见的芯片里的外设。这个部件可以操纵队列，依靠的是强大的数字运算能力和强大的总线设计。在阵列中，数据的运算都它给来做。</p><p>②Bus-Matrix：Bus-Matrix的功能是管理总线。在阵列中，方阵Bus-Matrix作为中建管理，减少了资源的浪费，增加了系统的简洁有序性，降低了信息传输的错误率。</p><p>③FLASH：来记载指令和常量。(我们都知道程序下载到Flash里后是掉电不失去的。)</p><p>④SRAM：处理变量和堆栈记录，且变量更改方便快速。(我们都知道SRAM是掉电丢失的，但是数据读写真的很快。)</p><p>⑤RCC：用于管理外设方阵的作息(在STM32里，我们要使用某个片上外设，都得先开RCC。)</p><p>⑥SDIO：Flash和SRAM的能力有限，而SD卡的容量很大，SDIO就是专门用来与SD卡沟通的接口。</p><h3 id="1-2-总线结构"><a href="#1-2-总线结构" class="headerlink" title="1.2 总线结构"></a>1.2 总线结构</h3><p>嵌入式系统中常见的总线由IIC总线、SPI总线、CAN总线、ISA总线、PCI总线</p><p>本芯片中总线系统包括</p><p>①ICode总线：该总线将M3内核指令总线和闪存指令接口相连，指令的预取在该总线上面完成。</p><p>②DCode总线：该总线将M3内核的DCode总线与闪存存储器的数据接口相连接，常量加载和调试访问在该总线上面完成。</p><p>③系统（System）总线：该总线连接M3内核的系统总线到总线矩阵，总线矩阵协调内核和DMA间访问。</p><p>④DMA总线：该总线将DMA的AHB主控接口与总线矩阵相连，总线矩阵协调CPU的DCode和DMA到SRAM，闪存和外设的访问。</p><p>⑤总线矩阵：总线矩阵协调内核系统总线和DMA主控总线之间的访问仲裁，仲裁利用轮换算法。</p><p>⑥AHB&#x2F;APB桥：这两个桥在AHB和2个APB总线间提供同步连接，APB1操作速度限于36MHz，APB2操作速度全速（72MHz）。</p><h3 id="1-3-引脚定义"><a href="#1-3-引脚定义" class="headerlink" title="1.3 引脚定义"></a>1.3 引脚定义</h3><p><img src="https://s1.vika.cn/space/2023/03/05/87338e22d00146e4b53de715ed78a1b6" alt="image-20230305213052375"></p><p><img src="https://s1.vika.cn/space/2023/03/05/f847169f5e0243a1b8c56684c82c286e" alt="image-20230305213112090"></p><h3 id="1-4-启动配置"><a href="#1-4-启动配置" class="headerlink" title="1.4 启动配置"></a>1.4 启动配置</h3><p><img src="https://s1.vika.cn/space/2023/03/05/ad735f524b9844d88c416ed2d818baa8" alt="image-20230305230127565"></p><h3 id="1-5-最小系统电路"><a href="#1-5-最小系统电路" class="headerlink" title="1.5 最小系统电路"></a>1.5 最小系统电路</h3><p><img src="https://s1.vika.cn/space/2023/03/05/2d844e45c34b4f149a3e34d904294ba7" alt="image-20230305230802001"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2023/03/05/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/05/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>树状数组也是高级数据结构之一</p><p><strong>树状数组，利用数的二进制特征进行检索的一种树状结构</strong></p><p>是一种真正的高级数据结构：二分思想（O(logn)））、二叉树、位运算、前缀和</p><p>树状数组的基本应用：</p><ol><li><p>修改元素add(k,x):把a[k]加上x。</p></li><li><p>求和：</p><p>sum(x) &#x3D; a1+ .. +ax</p><p>区间和ai+…+aj&#x3D;sum(j)-sum(i-1)</p></li></ol><h3 id="求区间和（只查询）"><a href="#求区间和（只查询）" class="headerlink" title="求区间和（只查询）"></a>求区间和（只查询）</h3><p><img src="https://s1.vika.cn/space/2023/03/08/6c134a110e364fb1be951c966ffdd55b" alt="image-20230308143052014"></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line"><span class="built_in">sum</span> = [<span class="number">0</span>]*<span class="number">20</span></span><br><span class="line"><span class="built_in">sum</span>[<span class="number">1</span>] = a[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):      <span class="comment">#计算前缀和</span></span><br><span class="line">    <span class="built_in">sum</span>[i]=a[i]+<span class="built_in">sum</span>[i-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):      <span class="comment">#用前缀和反推计算数组a[]：</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>[i]-<span class="built_in">sum</span>[i-<span class="number">1</span>],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[5,8]=&quot;</span>,<span class="built_in">sum</span>[<span class="number">8</span>]-<span class="built_in">sum</span>[<span class="number">4</span>]) <span class="comment">#查询区间和，例如查询[5,8]</span></span><br></pre></td></tr></table></figure><p>那如果数列是动态的呢？</p><p>修改元素效率不发生变化</p><p>但对于区间和：sum(i)-sum(i-1)复杂度:O(n)</p><p>效率很低</p><p><strong>那么就可以引入树状数组的概念</strong></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态修改、求区间和：用树状数组</p><p>先展示代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, d</span>):</span><br><span class="line">    <span class="keyword">while</span>(x&lt;n):</span><br><span class="line">        tree[x] += d</span><br><span class="line">        x += lowbit(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x</span>):</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    whlie(x&gt;<span class="number">0</span>):</span><br><span class="line">        ans += tree[x]</span><br><span class="line">        x -= lowbit(x)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>树状数组的结构与二叉树相似</p><p><img src="https://s1.vika.cn/space/2023/03/08/e6ab4be71b414495ab2f6252cb0171c8" alt="image-20230308144002645"></p><p>右边的每个点的值等于其子树的值的和</p><p>代码中的lowbit的功能：找到x的二进制数的最后一个1</p><p>从lowbit推出tree[]数组，所有的计算都基于tree[]</p><p>另m&#x3D;lowbit(x)</p><p><strong>定义tree[x]：把a[x]和他前面共m个数 相加</strong></p><p>例：lowbit(6)&#x3D;2,有tree[6] &#x3D; a[5]+a[6]</p><p>用图来表示：</p><p><img src="https://s1.vika.cn/space/2023/03/08/573b4592535c4d88933b3fb0c570a8bc" alt="image-20230308152830649"></p><p>有了tree[]，就可以进行基于tree[]的计算</p><h3 id="基于tree-的计算"><a href="#基于tree-的计算" class="headerlink" title="基于tree[]的计算"></a>基于tree[]的计算</h3><p><strong>求和</strong></p><p>那以上关系是如何得到的？借助lowbit(x)</p><p><img src="https://s1.vika.cn/space/2023/03/08/a12fe577b490424cbab48a94e4cba1db" alt="image-20230308153100735"></p><p><strong>数组更新</strong></p><p><img src="https://s1.vika.cn/space/2023/03/08/e589589301b747bbbad9e7b8eb224198" alt="image-20230308153210159"></p><h2 id="树状数组处理逆序对问题"><a href="#树状数组处理逆序对问题" class="headerlink" title="树状数组处理逆序对问题"></a>树状数组处理逆序对问题</h2><p>对于逆序对问题（对数组中没两个元素，前边的大于后边的就代表是一对逆序对）</p><p>题目样式：</p><p><img src="https://s1.vika.cn/space/2023/03/13/3ee124fc3951456f9583b94e2d8df0d0" alt="image-20230313183518446"></p><p>老样子，先暴力：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))  </span><br><span class="line">res=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,n):</span><br><span class="line">        <span class="keyword">if</span> a[j]&lt;a[i]:</span><br><span class="line">            res +=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>模拟：先检查第一个数a1，把后面所有数跟它比较，如果发现有一个比a1小，就是一个逆序对；再检查第二个数，第三个数…….；直到最后一个数</p><p>复杂度：O(N2)</p><p>经观察，暴力法的执行过程和交换排序很想，可以联想到归并排序，是否可以处理？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">L, mid, R</span>):</span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    i = L;   j = mid+<span class="number">1</span>;    t=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid <span class="keyword">and</span> j &lt;= R):</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[j]):</span><br><span class="line">            b[t] = a[j]; t+=<span class="number">1</span>;  j+=<span class="number">1</span></span><br><span class="line">            res = res + mid-i+<span class="number">1</span>         <span class="comment">#记录逆序对数量          </span></span><br><span class="line">        <span class="keyword">else</span>:   b[t] = a[i];  t+=<span class="number">1</span>   i+=<span class="number">1</span></span><br><span class="line"><span class="comment">#一个子序列中的数都处理完了，另一个还没有，把剩下的复制过来</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:  b[t]=a[i];  t+=<span class="number">1</span>;  i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= R:    b[t]=a[j];  t+=<span class="number">1</span>;  j+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t): a[L+i] = b[i]<span class="comment">#把排好序的b[]复制回a[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">L, R</span>):</span><br><span class="line">    <span class="keyword">if</span> L&lt;R:  </span><br><span class="line">        mid = (L + R) // <span class="number">2</span>    <span class="comment">#平分成两个子序列</span></span><br><span class="line">        merge_sort(L, mid)</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>, R)</span><br><span class="line">        merge(L, mid, R)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())) </span><br><span class="line">b = [<span class="number">0</span>]*n</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">merge_sort(<span class="number">0</span>, n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>相比普通的归并排序，这里只多了一个res &#x3D; res + mid - i +1 用于记录逆序对数量</p><p><strong>以上两种是基础思想，用树状数组解决逆序对问题是树状数组的巧妙应用</strong></p><p><img src="https://s1.vika.cn/space/2023/03/13/3ef3b687f69c457aa8aedf732e7e72cc" alt="image-20230313184550331"></p><p>倒序：</p><p><img src="https://s1.vika.cn/space/2023/03/13/0bd33e035b784976ab67389cb2b79d82" alt="image-20230313184707737"></p><p>正序：</p><p><img src="https://s1.vika.cn/space/2023/03/13/35c5c9866a294ccea85ff850c6aadb49" alt="image-20230313184720590"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">b = <span class="built_in">sorted</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  a[a.index(b[i])] = i+<span class="number">1</span></span><br><span class="line">tree = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">x, d</span>):</span><br><span class="line">    <span class="keyword">while</span>(x &lt; n):</span><br><span class="line">        tree[x] += d</span><br><span class="line">        x += lowbit(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">x</span>):</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span>):</span><br><span class="line">        ans += tree[x]</span><br><span class="line">        x -= lowbit(x)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">a.insert(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#在最前面加个0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    update(a[i], <span class="number">1</span>)</span><br><span class="line">    res += <span class="built_in">sum</span>(a[i]-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集+例题</title>
      <link href="/2023/03/05/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/03/05/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><ol><li>并查集作为一种非常精巧而实用的高级数据结构，用于处理不相交集合的合并问题</li><li>基本操作：<ul><li>初始化</li><li>合并</li><li>查找</li></ul></li><li>基本应用<ul><li>连通子图</li><li>最小生成树Kruskal算法</li><li>最近公共祖先</li></ul></li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_set</span>():</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):s.append(i)</span><br><span class="line"><span class="comment">#s = list(range(N))</span></span><br></pre></td></tr></table></figure><p>初始化数组的元素均为自身索引</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>近似于创建个体与个体间的联系</p><p><img src="https://s1.vika.cn/space/2023/03/05/200e65f026da41d3b7001e9e4b6733a2" alt="image-20230305120309468"></p><p><img src="https://s1.vika.cn/space/2023/03/05/e11d33c17bc14b69ad92d9426b85baf0" alt="image-20230305120454149"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_set</span>(<span class="params">x,y</span>):</span><br><span class="line">    x = find_set(x)</span><br><span class="line">    y = find_set(y)</span><br><span class="line">    <span class="keyword">if</span>(x!=y):s[x] = s[y]</span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>查找元素的集，是一个递归的过程，直到元素的值和他的集相等，就找到了根节点的集。</p><p>对于递归搜索树，情况多种，可能很细长，复杂度O(N),则出现了退化现象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_set</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span>(x!=s[x]):<span class="keyword">return</span> find_set(s[x])</span><br><span class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>若需查找有多少连通子集</p><ul><li>则可直接find_set()查找，如果s[i] &#x3D; i,即根节点，是所在集的代表</li><li>统计根节点数量，就是集的数量</li></ul><p><strong>那么是否可以对查找低效的递归进行优化呢？</strong></p><p>路径压缩可以消除这种复杂的递归模型</p><h4 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h4><p>基本思路：</p><ul><li>查询程序find_set()：沿着搜索路径找到根结点，这条路径可能很长。</li><li>优化：沿路径返回时，顺便把i所属的集改成根结点。下次再搜，复杂度是O(1)。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_set</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span>(x != s[x]):s[x] = find_set(s[x])</span><br><span class="line">    <span class="keyword">return</span> s[x]</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>路径压缩：整个搜索路径上的元素，在递归过程中，从元素i到根结点的所有元素，它们所属的集都被改为根结点。</li><li>路径压缩不仅优化了下次查询，而且也优化了合并，因为合并时也用到了查询。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并查集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端WEB学习笔记（一）</title>
      <link href="/2023/02/09/%E7%A7%BB%E5%8A%A8%E7%AB%AFWEB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/09/%E7%A7%BB%E5%8A%A8%E7%AB%AFWEB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="移动端WEB学习笔记（一）"><a href="#移动端WEB学习笔记（一）" class="headerlink" title="移动端WEB学习笔记（一）"></a>移动端WEB学习笔记（一）</h1><details class="folding-tag" blue open><summary> 1.视口 </summary>              <div class="content">              <p>视口：浏览器显示页面内容的屏幕区域。可分为布局视口、视觉视口、理想视口</p><h3 id="1-1布局视口-layout-viewport（全部显示）"><a href="#1-1布局视口-layout-viewport（全部显示）" class="headerlink" title="1.1布局视口 layout viewport（全部显示）"></a>1.1布局视口 layout viewport（全部显示）</h3><p>直接压缩网页至手机尺寸，不适合移动端开发、只可缩放</p><h3 id="1-2视觉视口-visual-viewport（部分显示）"><a href="#1-2视觉视口-visual-viewport（部分显示）" class="headerlink" title="1.2视觉视口 visual viewport（部分显示）"></a>1.2视觉视口 visual viewport（部分显示）</h3><h3 id="1-3理想视口-ideal-viewport"><a href="#1-3理想视口-ideal-viewport" class="headerlink" title="1.3理想视口 ideal viewport"></a>1.3理想视口 ideal viewport</h3><ul><li>需手动添加meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的:布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</li></ul><h3 id="1-4meta视口标签"><a href="#1-4meta视口标签" class="headerlink" title="1.4meta视口标签"></a>1.4meta视口标签</h3><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/09/b8779b32d61f455da079c569830addff" alt="image-20230209211008715"></p><h3 id="1-5标准的viewport设置"><a href="#1-5标准的viewport设置" class="headerlink" title="1.5标准的viewport设置"></a>1.5标准的viewport设置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 2.二倍图 </summary>              <div class="content">              <p>因为环境不同所以需要用到二倍图、三倍图等</p><h3 id="2-1物理像素-amp-物理像素比"><a href="#2-1物理像素-amp-物理像素比" class="headerlink" title="2.1物理像素&amp;物理像素比"></a>2.1物理像素&amp;物理像素比</h3><p>移动端1px不一定等于1个物理像素（PC端是）</p><p>一个px能显示的像素个数称为物理像素比（屏幕像素比）</p><p>Retina(视网膜屏幕)物理像素压缩技术</p><h3 id="2-2多倍图"><a href="#2-2多倍图" class="headerlink" title="2.2多倍图"></a>2.2多倍图</h3><p>小图用放大技术会变得模糊</p><p>在viewport中可以使用北图来提高图片质量</p><p>背景图片需要注意缩放问题 </p><h3 id="2-3背景缩放-background-size"><a href="#2-3背景缩放-background-size" class="headerlink" title="2.3背景缩放 background-size"></a>2.3背景缩放 background-size</h3><p>规定背景图像的尺寸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: 宽度 高度;</span><br></pre></td></tr></table></figure><p>单位：长度|百分比|cover|contain</p><p>cover:覆盖父盒子，等比例拉伸直到完全覆盖，则会导致部分图片无法展示</p><p>contain:等比例拉伸，直到宽度或高度达到盒子边，会有空白区域</p><h3 id="2-4cutterman可以直接切多倍图"><a href="#2-4cutterman可以直接切多倍图" class="headerlink" title="2.4cutterman可以直接切多倍图"></a>2.4cutterman可以直接切多倍图</h3>              </div>            </details><details class="folding-tag" yellow><summary> 3.移动端开发选择 </summary>              <div class="content">              <h3 id="3-1移动端主流方案"><a href="#3-1移动端主流方案" class="headerlink" title="3.1移动端主流方案"></a>3.1移动端主流方案</h3><ol><li>单独制作移动端页面（主流）</li><li>响应式页面兼容移动端（其次）</li></ol><h3 id="3-2单独制作移动端页面（主流）"><a href="#3-2单独制作移动端页面（主流）" class="headerlink" title="3.2单独制作移动端页面（主流）"></a>3.2单独制作移动端页面（主流）</h3><p>网址域名前面加m(mobile)可以打开移动端。通过设备来进行判断跳转到pc还是移动</p><h3 id="3-3响应式页面兼容移动端（其次）"><a href="#3-3响应式页面兼容移动端（其次）" class="headerlink" title="3.3响应式页面兼容移动端（其次）"></a>3.3响应式页面兼容移动端（其次）</h3><p>根据浏览器宽度来进行适配，当几乎达到手机屏幕宽度时，则会改变样式</p>              </div>            </details><details class="folding-tag" cyan><summary> 4.移动端技术解决方案 </summary>              <div class="content">              <h3 id="4-1移动端浏览器"><a href="#4-1移动端浏览器" class="headerlink" title="4.1移动端浏览器"></a>4.1移动端浏览器</h3><p>移动端服务器基本都是以webkit内核为主，可以放心使用H5和CSS3</p><h3 id="4-2CSS初始化-normalize-css"><a href="#4-2CSS初始化-normalize-css" class="headerlink" title="4.2CSS初始化 normalize.css"></a>4.2CSS初始化 normalize.css</h3><p><img src="https://s1.vika.cn/space/2023/02/09/cd22f199822f4952b481191da16e2c60" alt="image-20230209231104788"></p><h3 id="4-3CSS3盒子模型-box-sizing"><a href="#4-3CSS3盒子模型-box-sizing" class="headerlink" title="4.3CSS3盒子模型 box-sizing"></a>4.3CSS3盒子模型 box-sizing</h3><p>可以改善传统盒子的类型例如(padding和margin会撑开盒子)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">css3盒子模型</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">传统盒子模型</span><br><span class="line">box-sizing: content-box;</span><br></pre></td></tr></table></figure><h3 id="4-4特殊样式"><a href="#4-4特殊样式" class="headerlink" title="4.4特殊样式"></a>4.4特殊样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*消除移动端点击高亮*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">                -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*消除webkit的给的样式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">                -webkit-appearance: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*禁用长按页面时弹出的菜单*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; -webkit-touch-callout: none&#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>黑马<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 5.移动端常见布局 </summary>              <div class="content">              <h4 id="移动端技术选型："><a href="#移动端技术选型：" class="headerlink" title="移动端技术选型："></a>移动端技术选型：</h4><p>选择开发方案 单独、响应</p><p><img src="https://s1.vika.cn/space/2023/02/09/b5ae7d29042e40b18d8980ea6da0b17f" alt="image-20230209233532174"></p><h3 id="5-1流式布局（百分比布局）"><a href="#5-1流式布局（百分比布局）" class="headerlink" title="5.1流式布局（百分比布局）"></a>5.1流式布局（百分比布局）</h3><p><img src="https://s1.vika.cn/space/2023/02/09/1fcce60a404a4135a0d723b6aa3217e6" alt="image-20230209233652029"></p><p>max-width: 最大宽度</p><p>min-width: 最小宽度</p><h4 id="5-1-1二倍精灵图做法"><a href="#5-1-1二倍精灵图做法" class="headerlink" title="5.1.1二倍精灵图做法"></a>5.1.1二倍精灵图做法</h4><ol><li>先等比例缩放精灵图为原来的一半</li><li>再去量坐标和大小</li><li>background-size缩放到现在精灵图的大小</li></ol><h3 id="5-2flex弹性布局"><a href="#5-2flex弹性布局" class="headerlink" title="5.2flex弹性布局"></a>5.2flex弹性布局</h3><p><img src="https://s1.vika.cn/space/2023/02/10/030600fb82804cba855384290a370c68" alt="image-20230210154209902"></p><h4 id="5-2-1布局原理"><a href="#5-2-1布局原理" class="headerlink" title="5.2.1布局原理"></a>5.2.1布局原理</h4><p>为盒状模型提供最大的灵活性，任何一个容器都可以指定flex布局</p><ul><li>当为父盒子设为flex布局后，子元素float、clear、vertical-aligin</li><li>伸缩布局&#x3D;弹性布局&#x3D;伸缩盒布局&#x3D;弹性盒布局&#x3D;flex布局</li></ul><p>原理就是给父盒子添加flex属性，控制子box的位置和排列方式</p><h4 id="5-2-2布局父项常见属性"><a href="#5-2-2布局父项常见属性" class="headerlink" title="5.2.2布局父项常见属性"></a>5.2.2布局父项常见属性</h4><p>6个：<img src="https://s1.vika.cn/space/2023/02/10/2dca1ed771084d6795665293b3188c4d" alt="image-20230210155443000"></p><p><strong>flex-direction 设置主轴的方向</strong></p><p>属性值：<img src="https://s1.vika.cn/space/2023/02/10/1d0a038fa3fc485fa89430ae53f7901a" alt="image-20230210160008191"></p><p><strong>justify-content 设置主轴上的子元素的排列方式</strong></p><p>注：使用之前要确定好主轴是哪个</p><p><img src="https://s1.vika.cn/space/2023/02/10/4696abedb24449818140d08ca4a9bcea" alt="image-20230210160821348"></p><p><strong>flex-wrap设置子元素是否换行</strong></p><p>nowrap:不换; wrap: 换</p><p><strong>align-items 设置侧轴上的子元素排列方式（单行）</strong></p><p><img src="https://s1.vika.cn/space/2023/02/10/d1d30f745e074231a88420fac78ac3bb" alt="image-20230210162740076"></p><p>注：需要stretch拉伸时，子盒子不能给高度</p><p><strong>align-content 设置侧轴上的子元素排列方式（多行）</strong></p><p>只能在换行的情况，在单行下是没有效果的</p><p>属性值和justify-content相同</p><p><strong>flex-flow 直接把flex-direction 和 flex-wrap 结合一起</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: column wrap;</span><br></pre></td></tr></table></figure><h4 id="5-2-3布局父项常见属性"><a href="#5-2-3布局父项常见属性" class="headerlink" title="5.2.3布局父项常见属性"></a>5.2.3布局父项常见属性</h4><p><strong>flex属性</strong></p><p>定义子项目分配剩余空间，用flex表示占多少份</p><p>default: 0</p><p><strong>align-self: 可以加在单个盒子的属性里，单独进行在侧轴方向的操作</strong></p><p><strong>order：可以修改盒子顺序，default:0</strong></p><h3 id="5-3rem适配布局"><a href="#5-3rem适配布局" class="headerlink" title="5.3rem适配布局"></a>5.3rem适配布局</h3><p>在此布局中元素可以随着屏幕大小变化而变化</p><p><strong>rem基础</strong></p><p>rem是一个相对单位，类似于em，em是父元素字体大小</p><p>不同的是rem的基准是相对于html元素的字体大小</p><p>rem的优点就是可以通过修改html里面文字大小来改变页面中元素的大小可以整体控制</p><h4 id="5-3-1-媒体查询"><a href="#5-3-1-媒体查询" class="headerlink" title="5.3.1 媒体查询"></a>5.3.1 媒体查询</h4><p><img src="https://s1.vika.cn/space/2023/02/10/9b0e1344db54446ebace7611e9d9fed3" alt="image-20230210221954408"></p><ul><li>使用@media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media可以针对不同的屏幕尺寸设置不同的样式</li></ul><h4 id="5-3-2-语法规范"><a href="#5-3-2-语法规范" class="headerlink" title="5.3.2 语法规范"></a>5.3.2 语法规范</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line">CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/10/24b67a355a77457bab946b6818ad9b9c" alt="image-20230210222330070"></p><ol><li><p>meidiatype查询类型</p><p>不同的终端设备划分成不同类型，成为媒体类型</p><p>值：all(所有设备)、print(打印机、打印预览)、scree(用于电脑屏幕、平板电脑、智能手机)</p></li><li><p>关键字</p><p><img src="/2023/02/09/%E7%A7%BB%E5%8A%A8%E7%AB%AFWEB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/Users/Yuchen/AppData/Roaming/Typora/typora-user-images/image-20230211104041135.png" alt="image-20230211104041135"></p><p>and:多个媒体特性连接到一起，相当于“且”</p><p>not：排除某个类型，“非”</p><p>only：指定某个特定的类型</p></li><li><p>媒体特性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在屏幕上 并且最大宽度是800px 设置我们想要的样式*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="comment">/*大于800之后就不显示红色了*/</span></span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记(一)</title>
      <link href="/2023/02/07/day14/"/>
      <url>/2023/02/07/day14/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><ul><li><p>Python相关：基础、函数、数据类型、面向、模块。</p></li><li><p>前端开发：HTML、CSS、JavaScript、jQuery。【静态页面】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java+前端； Python+前端； Go+前端  -&gt; 【动态页面】</span><br></pre></td></tr></table></figure></li></ul><p>直观：</p><ul><li>静态，写死了，页面永远长一个样子。</li><li>动态页面，页面上的数据可以实时的修改和展示。</li></ul><p>有序列表：</p><ol><li>第一行</li><li>第二行</li></ol><h2 id="1-初识网站"><a href="#1-初识网站" class="headerlink" title="1. 初识网站"></a>1. 初识网站</h2><ul><li>默认编写的静态的效果</li><li>动态：需要用到Web框架的功能。</li><li><img src="/images/assest/image-20211123090038081.png" alt="image-20211123090038081"></li></ul><p>对于目前的我们来看，都什么可以做数据的存储：</p><ul><li><p>txt文件</p></li><li><p>excel文件</p></li><li><p>![image-20230209204922944](C:&#x2F;Users&#x2F;Yuchen&#x2F;AppData&#x2F;Roaming&#x2F;Typora&#x2F;typora-user-images&#x2F;image-20230209204922944.png</p></li><li><p>专业的软件：数据库管理系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL(*)免费</span><br><span class="line">Oracle/SQLServer/DB2/Access...</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/assest/image-20211123090945859.png" alt="image-20211123090945859"></p><p>今日概要：</p><ul><li>MySQL安装 &amp; 配置</li><li>MySQL的启动和关闭</li><li>指令（*）</li><li>Python第三方模块，发送指令并获取MySQL返回的结果。</li></ul><h2 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h2><p>MySQL，本质上就是一个软件。</p><ul><li>8.x</li><li>5.x ，课堂上 5.7.31版本。</li></ul><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/images/assest/image-20211123093219020.png" alt="image-20211123093219020"></p><ul><li>windows补丁</li><li>MySQL压缩包</li></ul><h3 id="2-2-安装补丁"><a href="#2-2-安装补丁" class="headerlink" title="2.2 安装补丁"></a>2.2 安装补丁</h3><p><img src="/images/assest/image-20211123093426926.png" alt="image-20211123093426926"></p><h3 id="2-3-安装"><a href="#2-3-安装" class="headerlink" title="2.3 安装"></a>2.3 安装</h3><p>mysql-5.7.31-winx64.zip 是免安装的版本。</p><ul><li>解压zip文件</li><li>将解压后的文件夹放入路径（不要有中文路径）</li></ul><p><img src="/images/assest/image-20211123094234870.png" alt="image-20211123094234870"></p><h3 id="2-4-创建配置文件"><a href="#2-4-创建配置文件" class="headerlink" title="2.4 创建配置文件"></a>2.4 创建配置文件</h3><p><img src="/images/assest/image-20211123094405539.png" alt="image-20211123094405539"></p><h3 id="2-5-初始化"><a href="#2-5-初始化" class="headerlink" title="2.5 初始化"></a>2.5 初始化</h3><ul><li><p>打开终端 &amp; 以管理员的权限去运行</p><p><img src="/images/assest/image-20211123095052630.png" alt="image-20211123095052630"></p></li><li><p>输入初始化的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysqld.exe&quot;  --initialize-insecure</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/assest/image-20211123095234098.png" alt="image-20211123095234098"></p><p>至此，MySQL的安装已完成。</p><h2 id="3-启动MySQL"><a href="#3-启动MySQL" class="headerlink" title="3.启动MySQL"></a>3.启动MySQL</h2><p>启动MySQL一般有两种方式：</p><ul><li><p>临时启动（不建议）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysqld.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123101948088.png" alt="image-20211123101948088"></p></li><li><p>制作成Windows服务，服务来进行关闭和开启。</p><ul><li><p>制作服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysqld.exe&quot; --install mysql57</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123102144666.png" alt="image-20211123102144666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; net start mysql57</span><br><span class="line">&gt;&gt;&gt; net stop mysql57</span><br></pre></td></tr></table></figure></li><li><p>启动和关闭服务</p></li><li><p>也可以在window的服务管理中点击按钮启动和关闭服务。例如：</p><p><img src="/images/assest/image-20210529225011045.png" alt="image-20210529225011045"></p><p><img src="/images/assest/image-20210529225043126.png" alt="image-20210529225043126"></p><p><img src="/images/assest/image-20210510152740268.png" alt="image-20210510152740268"></p></li></ul></li></ul><h2 id="4-连接测试"><a href="#4-连接测试" class="headerlink" title="4.连接测试"></a>4.连接测试</h2><p><img src="/images/assest/image-20211123103351067.png" alt="image-20211123103351067"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysql.exe&quot; -h 127.0.0.1 -P 3306 -u root -p </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysql.exe&quot; -u root -p </span><br></pre></td></tr></table></figure><p>如果你将 <code>C:\Program Files\mysql-5.7.31-winx64\bin\</code>添加到了系统环境变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123103659526.png" alt="image-20211123103659526"></p><p><img src="/images/assest/image-20211123104252264.png" alt="image-20211123104252264"></p><h3 id="4-1-设置密码"><a href="#4-1-设置密码" class="headerlink" title="4.1 设置密码"></a>4.1 设置密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password = password(&#x27;root123&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123105400675.png" alt="image-20211123105400675"></p><h3 id="4-2-查看已有的文件夹（数据库）"><a href="#4-2-查看已有的文件夹（数据库）" class="headerlink" title="4.2 查看已有的文件夹（数据库）"></a>4.2 查看已有的文件夹（数据库）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123105638307.png" alt="image-20211123105638307"></p><h3 id="4-3-退出（关闭连接）"><a href="#4-3-退出（关闭连接）" class="headerlink" title="4.3 退出（关闭连接）"></a>4.3 退出（关闭连接）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123105756591.png" alt="image-20211123105756591"></p><h3 id="4-4-再连接MySQL"><a href="#4-4-再连接MySQL" class="headerlink" title="4.4. 再连接MySQL"></a>4.4. 再连接MySQL</h3><p><img src="/images/assest/image-20211123105902052.png" alt="image-20211123105902052"></p><p>汇总命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password = password(&#x27;root123&#x27;);</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysql -u root -p</span><br><span class="line">输入密码</span><br><span class="line">mysql&gt;exit;</span><br></pre></td></tr></table></figure><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><ol><li><p>张杰斌</p><ul><li>添加环境变量【错】<br><img src="/images/assest/image-20211123110510359.png" alt="image-20211123110510359"></li><li>重新打开终端</li><li>输入指令（首次不需要设置密码）<br><img src="/images/assest/image-20211123110607327.png" alt="image-20211123110607327"></li></ul></li><li><p>张点墨<br><img src="/images/assest/image-20211123110638369.png" alt="image-20211123110638369"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以前自己安装过其他的MySQL，在终端运行mysql是用以前的那个工具。</span><br></pre></td></tr></table></figure><ul><li><p>确保MySQL服务已经开启</p></li><li><p>直接过路径来编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\mysql-5.7.31-winx64\bin\mysql.exe&quot; -u root -p </span><br></pre></td></tr></table></figure></li><li><p>检查自己的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自己环境变量里，是不是有以前的那个MySQL的路径，全部删除。</span><br></pre></td></tr></table></figure></li><li><p>记下来你要做如下事：</p><ul><li>window服务，里面有没有以前安装的MySQL？</li></ul></li></ul></li><li><p>gongxingyun</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 路径没问题</span><br><span class="line">- 添加环境变量</span><br><span class="line">- 关闭终端，重新打开终端。</span><br></pre></td></tr></table></figure></li><li><p>郭智</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 确保，你是32位还是64位？</span><br><span class="line">- 如果是64位，换成用管理员权限运行。</span><br><span class="line">- 如果是32位，需要安装32位的MySQL（同曹成鑫）</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-忘记密码"><a href="#5-忘记密码" class="headerlink" title="5.忘记密码"></a>5.忘记密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，启动MySQL时，需要用户输入账户名、密码。</span><br><span class="line"></span><br><span class="line">修改MySQL配置，重新启动MySQL（无账号模式）</span><br><span class="line">mysql -u root -p </span><br><span class="line">重新设置密码</span><br><span class="line">退出</span><br><span class="line"></span><br><span class="line">再重新修MySQL配置文件，重新启动MySQL（需要账号的模式）</span><br><span class="line">mysql -u root -p </span><br><span class="line">新密码</span><br></pre></td></tr></table></figure><ul><li><p>停止现在MySQL服务<br><img src="/images/assest/image-20211123113111108.png" alt="image-20211123113111108"></p></li><li><p>修改MySQL配置文件（以无账号模式）<br><img src="/images/assest/image-20211123113217089.png" alt="image-20211123113217089"></p></li><li><p>重新启动MySQL<br><img src="/images/assest/image-20211123113412267.png" alt="image-20211123113412267"></p></li><li><p>再次登录MySQL（无需密码）<br><img src="/images/assest/image-20211123113501065.png" alt="image-20211123113501065"></p></li><li><p>执行命令设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user set authentication_string = password(&#x27;新密码&#x27;),password_last_changed=now() where user=&#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">update user set authentication_string = password(&#x27;root123&#x27;),password_last_changed=now() where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>重新修改配置文件（需要账号的模式登录）【服务停掉】</p><p><img src="/images/assest/image-20211123113959553.png" alt="image-20211123113959553"></p></li><li><p>重新启动MySQL</p></li><li><p>登录时候输入新的密码即可。</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>支持，MySQL的环境搭建相关的事全部搞定了。</p><ul><li>安装</li><li>配置</li><li>启动</li><li>连接（密码、忘记密码）</li></ul><p>以后我们再操作MySQL时：</p><ul><li><p>关闭和开启MySQL服务</p></li><li><p>用MySQL自动工具连接MySQL并发送指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myql -u root -p </span><br></pre></td></tr></table></figure></li></ul><p>接下来，我们的重点：</p><p><img src="/images/assest/image-20211123103351067.png" alt="image-20211123103351067"></p><h2 id="6-MySQL指令"><a href="#6-MySQL指令" class="headerlink" title="6.MySQL指令"></a>6.MySQL指令</h2><p><img src="/images/assest/image-20211123103351067.png" alt="image-20211123103351067"></p><p>在MySQL和我们平时认知不同的概念。</p><table><thead><tr><th>MySQL</th><th>认知</th></tr></thead><tbody><tr><td>数据库</td><td>文件夹</td></tr><tr><td>数据表</td><td>文件（Excel文件）</td></tr></tbody></table><h3 id="6-1-数据库管理（文件夹）"><a href="#6-1-数据库管理（文件夹）" class="headerlink" title="6.1 数据库管理（文件夹）"></a>6.1 数据库管理（文件夹）</h3><ul><li><p>查看已有的数据库（文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库（文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名字 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database gx_day14 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库（文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database gx_day14;</span><br></pre></td></tr></table></figure></li><li><p>进入数据库（进入文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use gx_day14;</span><br></pre></td></tr></table></figure></li><li><p>查看文件夹下所有的数据表（文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-2-数据表的管理（文件）"><a href="#6-2-数据表的管理（文件）" class="headerlink" title="6.2 数据表的管理（文件）"></a>6.2 数据表的管理（文件）</h3><ul><li><p>进入数据库（进入文件夹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 数据库;</span><br><span class="line">use gx_day14;</span><br></pre></td></tr></table></figure></li><li><p>查看当前数据库下的所有 表（文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>创建表（文件文件）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">列名称 类型,</span><br><span class="line">    列名称 类型,</span><br><span class="line">    列名称 类型</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><img src="/images/assest/image-20211123140828409.png" alt="image-20211123140828409"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">16</span>),age <span class="type">int</span>) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tb1(</span><br><span class="line">    <span class="built_in">id</span> <span class="built_in">int</span>, </span><br><span class="line">    name varchar(<span class="number">16</span>),</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>, </span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span>,   <span class="comment">-- 不允许为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>,                <span class="comment">-- 允许为空（默认）</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>, </span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 插入数据时，age列的值默认3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,     <span class="comment">-- 主键（不允许为空，不允许重复）</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>主键一般用于表示当前行的数据的编号（类似于人的身份证）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key, <span class="comment">-- 内部维护，自增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>一般情况下，我们再创建表时都会这样来写：【标准】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc tb1;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(16) | YES  |     | NULL    |                |</span><br><span class="line">| age   | int(11)     | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名称;</span><br></pre></td></tr></table></figure></li></ul><p>常用数据类型：</p><ul><li><p>tinyint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有符号，取值范围：-128 ～ 127 (有正有负)【默认】</span><br><span class="line">无符号，取值范围：0 ～ 255（只有正）</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb2(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    age tinyint   <span class="comment">-- 有符号：取值范围：-128 ～ 127</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb3(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    age tinyint unsigned <span class="comment">-- 无符号：取值范围：0 ～ 255</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li><li><p>int</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int表示有符号，取值范围：-2147483648 ～ 2147483647</span><br><span class="line">int unsigned表示无符号，取值范围：0 ～ 4294967295</span><br></pre></td></tr></table></figure></li><li><p>bigint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有符号，取值范围：-9223372036854775808 ～ 9223372036854775807</span><br><span class="line">无符号，取值范围：0  ～  18446744073709551615</span><br></pre></td></tr></table></figure><p>练习题：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb2(</span><br><span class="line">    id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    salary <span class="type">int</span>,</span><br><span class="line">    age tinyint</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">10000</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">20000</span>,<span class="number">28</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">30000</span>,<span class="number">38</span>),(<span class="number">40000</span>,<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"># 查看表中的数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_gx_day14 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> tb1                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> tb2(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     salary <span class="type">int</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     age tinyint</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_gx_day14 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> tb1                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb2                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">10000</span>,<span class="number">18</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">20000</span>,<span class="number">28</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> tb2(salary,age) <span class="keyword">values</span>(<span class="number">30000</span>,<span class="number">38</span>),(<span class="number">40000</span>,<span class="number">40</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  <span class="number">10000</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>  <span class="number">20000</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>  <span class="number">30000</span> <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span>  <span class="number">40000</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>float</p></li><li><p>double</p></li><li><p>decimal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">准确的小数值，m是数字总个数（负号不算），d是小数点后个数。 m最大值为65，d最大值为30。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">create table tb3(</span><br><span class="line">id int not null primary key auto_increment,</span><br><span class="line">salary decimal(8,2)</span><br><span class="line">)default charset=utf8;</span><br><span class="line"></span><br><span class="line">insert into tb3(salary) values(1.28);</span><br><span class="line">insert into tb3(salary) values(5.289);</span><br><span class="line">insert into tb3(salary) values(5.282);</span><br><span class="line">insert into tb3(salary) values(122115.11);</span><br><span class="line"></span><br><span class="line">select * from tb3;</span><br></pre></td></tr></table></figure></li><li><p>char(m)，速度快。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">定长字符串，m代表字符串的长度，最多可容纳<span class="number">255</span>个字符。</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>(<span class="number">11</span>)，固定用<span class="number">11</span>个字符串进行存储，哪怕真是没有<span class="number">11</span>个字符，也会按照<span class="number">11</span>存储。</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb4(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">mobile <span class="type">char</span>(<span class="number">11</span>)</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb4(mobile) <span class="keyword">values</span>(&quot;151&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb4(mobile) <span class="keyword">values</span>(&quot;15131255555&quot;);</span><br></pre></td></tr></table></figure></li><li><p>varchar(m)，节省空间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">变长字符串，m代表字符的长度。   最大<span class="number">65535</span>字节<span class="operator">/</span><span class="number">3</span> <span class="operator">=</span> 最大的m</span><br><span class="line"></span><br><span class="line"><span class="type">varchar</span>(<span class="number">11</span>)，真实数据有多少长久按照多长存储。</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb5(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">mobile <span class="type">varchar</span>(<span class="number">11</span>)</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb5(mobile) <span class="keyword">values</span>(&quot;151&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb5(mobile) <span class="keyword">values</span>(&quot;15131255555&quot;);</span><br></pre></td></tr></table></figure></li><li><p>text</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">text数据类型用于保存变长的大字符串，可以组多到<span class="number">65535</span> (<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">16</span> − <span class="number">1</span>)个字符。</span><br><span class="line"></span><br><span class="line">一般情况下，长文本会用text类型。例如：文章、新闻等。</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb6(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    title <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">content text</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></li><li><p>mediumtext</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A TEXT column with a maximum length of 16,777,215 (2**24 − 1) characters.</span><br></pre></td></tr></table></figure></li><li><p>longtext</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A TEXT column with a maximum length of 4,294,967,295 or 4GB (2**32 − 1)</span><br></pre></td></tr></table></figure></li><li><p>datetime</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY-MM-DD HH:MM:SS（1000-01-01 00:00:00/9999-12-31 23:59:59）</span><br></pre></td></tr></table></figure></li><li><p>date</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY-MM-DD（1000-01-01/9999-12-31）</span><br></pre></td></tr></table></figure></li></ul><p>练习题：用户表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb7(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age tinyint,</span><br><span class="line">    salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    ctime datetime</span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb7(name,password,email,age,salary,ctime) <span class="keyword">values</span>(&quot;武沛齐&quot;,&quot;123&quot;,&quot;xx@live.com&quot;,<span class="number">19</span>,<span class="number">1000.20</span>,&quot;2011-11-11 11:11:10&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb7(name,password,email,age,salary,ctime) <span class="keyword">values</span>(&quot;张电摩&quot;,&quot;123&quot;,&quot;xx@live.com&quot;,<span class="number">19</span>,<span class="number">1000.20</span>,&quot;2011-11-11 11:11:10&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb7(name,password,email,age,salary,ctime) <span class="keyword">values</span>(&quot;庞小青&quot;,&quot;123&quot;,&quot;xx@live.com&quot;,<span class="number">19</span>,<span class="number">1000.20</span>,&quot;2011-11-11 11:11:10&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb7(name,password,email,age,salary,ctime) <span class="keyword">values</span>(&quot;谢涛&quot;,&quot;123&quot;,&quot;xx@live.com&quot;,<span class="number">19</span>,<span class="number">1000.20</span>,&quot;2011-11-11 11:11:10&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb7(name,password,email,age,salary,ctime) <span class="keyword">values</span>(&quot;谢鹏&quot;,&quot;123&quot;,&quot;xx@live.com&quot;,<span class="number">19</span>,<span class="number">1000.20</span>,&quot;2011-11-11 11:11:10&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> password <span class="operator">|</span> email       <span class="operator">|</span> age  <span class="operator">|</span> salary  <span class="operator">|</span> ctime               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 武沛齐    <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span> xx<span class="variable">@live</span>.com <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span> <span class="number">1000.20</span> <span class="operator">|</span> <span class="number">2011</span><span class="number">-11</span><span class="number">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>MySQL还有很多其他的数据类型，例如：<em>set、enum、TinyBlob、Blob、MediumBlob、LongBlob 等</em>，详细见官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/data-types.html">https://dev.mysql.com/doc/refman/5.7/en/data-types.html</a></p><p>我们平时开发系统时，一般情况下：</p><ul><li>创建数据库</li><li>创建表结构</li></ul><p>都是需要提前通过上述命令创建。</p><h3 id="6-3-数据行操作"><a href="#6-3-数据行操作" class="headerlink" title="6.3 数据行操作"></a>6.3 数据行操作</h3><h4 id="1-新增数据"><a href="#1-新增数据" class="headerlink" title="1. 新增数据"></a>1. 新增数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名,列名) <span class="keyword">values</span>(值,值);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名,列名) <span class="keyword">values</span>(值,值),(值,值),(值,值),(值,值);</span><br></pre></td></tr></table></figure><h4 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2.删除数据"></a>2.删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span> <span class="keyword">and</span> name<span class="operator">=</span>&quot;谢涛&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span> <span class="keyword">or</span> name<span class="operator">=</span>&quot;谢涛&quot;;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">!=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值,列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb7 <span class="keyword">set</span> password<span class="operator">=</span>&quot;哈哈哈&quot;;</span><br><span class="line"><span class="keyword">update</span> tb7 <span class="keyword">set</span> email<span class="operator">=</span>&quot;哈哈哈&quot; <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> tb7 <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">10</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="4.查询数据"></a>4.查询数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名称;</span><br><span class="line"><span class="keyword">select</span> 列名称,列名称 <span class="keyword">from</span> 表名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> 列名称,列名称 <span class="keyword">from</span> 表名称 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb7;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> tb7 <span class="keyword">where</span> name<span class="operator">=</span>&quot;xx&quot; <span class="keyword">and</span> password<span class="operator">=</span>&quot;xx&quot;;</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>我们平时开发系统时，一般情况下：</p><ul><li>创建数据库</li><li>创建表结构</li></ul><p>都是需要提前通过工具+命令创建。</p><p>但是，表中的数据一般情况下都是通过程序来实现增删改查。</p><h2 id="7-案例：员工管理"><a href="#7-案例：员工管理" class="headerlink" title="7.案例：员工管理"></a>7.案例：员工管理</h2><ul><li><p>使用MySQL内置工具（命令）</p><ul><li><p>创建数据库：unicom</p></li><li><p>数据一张表：admin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表名：admin</span><br><span class="line">列：</span><br><span class="line">id，整型，自增，主键。</span><br><span class="line">username 字符串 不为空,</span><br><span class="line">password 字符串 不为空,</span><br><span class="line">mobile 字符串 不为空</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Python代码实现：</p><ul><li>添加用户</li><li>删除用户</li><li>查看用户</li><li>更新用户信息</li></ul></li></ul><p><img src="/images/assest/image-20211123103351067.png" alt="image-20211123103351067"></p><h3 id="7-1-创建表结构"><a href="#7-1-创建表结构" class="headerlink" title="7.1 创建表结构"></a>7.1 创建表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database unicom <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use unicom;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> admin(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    mobile <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="7-2-Python操作MySQL"><a href="#7-2-Python操作MySQL" class="headerlink" title="7.2 Python操作MySQL"></a>7.2 Python操作MySQL</h3><blockquote><p>用Python代码连接MySQL并发送指令。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h4 id="1-创建数据"><a href="#1-创建数据" class="headerlink" title="1.创建数据"></a>1.创建数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into admin(username,password,mobile) values(&#x27;wupeiqi&#x27;,&#x27;qwe123&#x27;,&#x27;15155555555&#x27;)&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令（千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入）</span></span><br><span class="line"><span class="comment"># sql = &quot;insert into admin(username,password,mobile) values(%s,%s,%s)&quot;</span></span><br><span class="line"><span class="comment"># cursor.execute(sql, [&quot;韩超&quot;, &quot;qwe123&quot;, &quot;1999999999&quot;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = &quot;insert into admin(username,password,mobile) values( %(n1)s, %(n2)s, %(n3)s)&quot;</span></span><br><span class="line"><span class="comment"># cursor.execute(sql, &#123;&quot;n1&quot;: &quot;集宁&quot;, &quot;n2&quot;: &quot;qwe123&quot;, &quot;n3&quot;: &quot;1999999999&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;用户名：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.upper() == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>)</span><br><span class="line">    mobile = <span class="built_in">input</span>(<span class="string">&quot;手机号：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.连接MySQL</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.发送指令（千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入）</span></span><br><span class="line">    sql = <span class="string">&quot;insert into admin(username,password,mobile) values(%s,%s,%s)&quot;</span></span><br><span class="line">    cursor.execute(sql, [user, pwd, mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.关闭</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h4 id="2-查询数据"><a href="#2-查询数据" class="headerlink" title="2.查询数据"></a>2.查询数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令（ *** 千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入***）</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取符合条件的所有数据，得到的是 [ 字典,字典, ]    空列表</span></span><br><span class="line">data_list = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> row_dict <span class="keyword">in</span> data_list:</span><br><span class="line">    <span class="built_in">print</span>(row_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭连接</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令（ *** 千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入***）</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取符合条件的第一条数据，字典    None</span></span><br><span class="line">res = cursor.fetchone()</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># &#123;&#x27;id&#x27;: 3, &#x27;username&#x27;: &#x27;集宁&#x27;, &#x27;password&#x27;: &#x27;qwe123&#x27;, &#x27;mobile&#x27;: &#x27;1999999999&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭连接</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令（ *** 千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入***）</span></span><br><span class="line">cursor.execute(<span class="string">&quot;delete from admin where id=%s&quot;</span>, [<span class="number">3</span>, ])</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h4 id="4-修改数据"><a href="#4-修改数据" class="headerlink" title="4.修改数据"></a>4.修改数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.连接MySQL</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&quot;root123&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.发送指令（ *** 千万不要用字符串格式化去做SQL的拼接，安全隐患SQL注入***）</span></span><br><span class="line">cursor.execute(<span class="string">&quot;update admin set mobile=%s where id=%s&quot;</span>, [<span class="string">&quot;1888888888&quot;</span>, <span class="number">4</span>, ])</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.关闭</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>强调：</p><ul><li><p>在进行 新增、删除、修改时，一定要记得commit，不然数据库么有数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(&quot;..&quot;)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure></li><li><p>在查询时，不需要commit，执行fetchall &#x2F; fetchone</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(&quot;...&quot;)</span><br><span class="line"></span><br><span class="line"># 第一条数据，字典，无数据时是空列表</span><br><span class="line">v1 = cursor.fetchone()</span><br><span class="line"></span><br><span class="line"># 所有数据，列表套字典，无数据时是None</span><br><span class="line">v1 = cursor.fetchall()</span><br></pre></td></tr></table></figure></li><li><p>对于SQL语句不要用Python的字符串格式化进行拼接（会被SQL注入），一定要用execute+参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;.%s..... %s&quot;</span>, [<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;xx&quot;</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-案例：Flask-MySQL"><a href="#8-案例：Flask-MySQL" class="headerlink" title="8.案例：Flask+MySQL"></a>8.案例：Flask+MySQL</h2><h3 id="8-1-新增用户"><a href="#8-1-新增用户" class="headerlink" title="8.1 新增用户"></a>8.1 新增用户</h3><p>补充代码实现</p><p><img src="/images/assest/image-20211123172333775.png" alt="image-20211123172333775"></p><p><img src="/images/assest/image-20211123172344629.png" alt="image-20211123172344629"></p><ul><li>农远隽<ul><li>add_user.py 文件，修改成  app.py</li><li>add_user.html 文件，放在 templates目录下。</li><li>把你的pycharm中运行所有的代码全都停下来。<img src="/images/assest/image-20211123174901851.png" alt="image-20211123174901851"></li><li>重新运行app.py</li></ul></li></ul><h3 id="8-2-查询所有用户"><a href="#8-2-查询所有用户" class="headerlink" title="8.2 查询所有用户"></a>8.2 查询所有用户</h3><p><img src="/images/assest/image-20211123180327614.png" alt="image-20211123180327614"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
